{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { signRequest } from './signer/signatureV4/signRequest.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { getSkewCorrectedDate } from './utils/getSkewCorrectedDate.mjs';\nimport { getUpdatedSystemClockOffset } from './utils/getUpdatedSystemClockOffset.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Middleware that SigV4 signs request with AWS credentials, and correct system clock offset.\n * This middleware is expected to be placed after retry middleware.\n */\nconst signingMiddlewareFactory = ({\n  credentials,\n  region,\n  service,\n  uriEscapePath = true\n}) => {\n  let currentSystemClockOffset;\n  return next => /*#__PURE__*/function () {\n    var _signingMiddleware = _asyncToGenerator(function* (request) {\n      currentSystemClockOffset = currentSystemClockOffset ?? 0;\n      const signRequestOptions = {\n        credentials: typeof credentials === 'function' ? yield credentials() : credentials,\n        signingDate: getSkewCorrectedDate(currentSystemClockOffset),\n        signingRegion: region,\n        signingService: service,\n        uriEscapePath\n      };\n      const signedRequest = yield signRequest(request, signRequestOptions);\n      const response = yield next(signedRequest);\n      // Update system clock offset if response contains date header, regardless of the status code.\n      // non-2xx response will still be returned from next handler instead of thrown, because it's\n      // only thrown by the retry middleware.\n      const dateString = getDateHeader(response);\n      if (dateString) {\n        currentSystemClockOffset = getUpdatedSystemClockOffset(Date.parse(dateString), currentSystemClockOffset);\n      }\n      return response;\n    });\n    function signingMiddleware(_x) {\n      return _signingMiddleware.apply(this, arguments);\n    }\n    return signingMiddleware;\n  }();\n};\nconst getDateHeader = ({\n  headers\n} = {}) => headers?.date ?? headers?.Date ?? headers?.['x-amz-date'];\nexport { signingMiddlewareFactory };\n//# sourceMappingURL=middleware.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}