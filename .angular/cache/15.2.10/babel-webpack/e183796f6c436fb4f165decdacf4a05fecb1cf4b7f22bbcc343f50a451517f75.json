{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { decodeJWT, assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { AuthTokenStorageKeys } from './types.mjs';\nimport { assert, TokenProviderErrorCode } from './errorHelpers.mjs';\nclass DefaultTokenStore {\n  constructor() {\n    this.name = 'CognitoIdentityServiceProvider'; // To be backwards compatible with V5, no migration needed\n  }\n\n  getKeyValueStorage() {\n    if (!this.keyValueStorage) {\n      throw new AuthError({\n        name: 'KeyValueStorageNotFoundException',\n        message: 'KeyValueStorage was not found in TokenStore'\n      });\n    }\n    return this.keyValueStorage;\n  }\n  setKeyValueStorage(keyValueStorage) {\n    this.keyValueStorage = keyValueStorage;\n  }\n  setAuthConfig(authConfig) {\n    this.authConfig = authConfig;\n  }\n  loadTokens() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      // TODO(v6): migration logic should be here\n      // Reading V5 tokens old format\n      try {\n        const authKeys = yield _this.getAuthKeys();\n        const accessTokenString = yield _this.getKeyValueStorage().getItem(authKeys.accessToken);\n        if (!accessTokenString) {\n          throw new AuthError({\n            name: 'NoSessionFoundException',\n            message: 'Auth session was not found. Make sure to call signIn.'\n          });\n        }\n        const accessToken = decodeJWT(accessTokenString);\n        const itString = yield _this.getKeyValueStorage().getItem(authKeys.idToken);\n        const idToken = itString ? decodeJWT(itString) : undefined;\n        const refreshToken = (yield _this.getKeyValueStorage().getItem(authKeys.refreshToken)) ?? undefined;\n        const clockDriftString = (yield _this.getKeyValueStorage().getItem(authKeys.clockDrift)) ?? '0';\n        const clockDrift = Number.parseInt(clockDriftString);\n        const signInDetails = yield _this.getKeyValueStorage().getItem(authKeys.signInDetails);\n        const tokens = {\n          accessToken,\n          idToken,\n          refreshToken,\n          deviceMetadata: (yield _this.getDeviceMetadata()) ?? undefined,\n          clockDrift,\n          username: yield _this.getLastAuthUser()\n        };\n        if (signInDetails) {\n          tokens.signInDetails = JSON.parse(signInDetails);\n        }\n        return tokens;\n      } catch (err) {\n        return null;\n      }\n    })();\n  }\n  storeTokens(tokens) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n      yield _this2.clearTokens();\n      const lastAuthUser = tokens.username;\n      yield _this2.getKeyValueStorage().setItem(_this2.getLastAuthUserKey(), lastAuthUser);\n      const authKeys = yield _this2.getAuthKeys();\n      yield _this2.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n      if (tokens.idToken) {\n        yield _this2.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n      }\n      if (tokens.refreshToken) {\n        yield _this2.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n      }\n      if (tokens.deviceMetadata) {\n        if (tokens.deviceMetadata.deviceKey) {\n          yield _this2.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n        }\n        if (tokens.deviceMetadata.deviceGroupKey) {\n          yield _this2.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n        }\n        yield _this2.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n      }\n      if (tokens.signInDetails) {\n        yield _this2.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n      }\n      yield _this2.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);\n    })();\n  }\n  clearTokens() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const authKeys = yield _this3.getAuthKeys();\n      // Not calling clear because it can remove data that is not managed by AuthTokenStore\n      yield Promise.all([_this3.getKeyValueStorage().removeItem(authKeys.accessToken), _this3.getKeyValueStorage().removeItem(authKeys.idToken), _this3.getKeyValueStorage().removeItem(authKeys.clockDrift), _this3.getKeyValueStorage().removeItem(authKeys.refreshToken), _this3.getKeyValueStorage().removeItem(authKeys.signInDetails), _this3.getKeyValueStorage().removeItem(_this3.getLastAuthUserKey())]);\n    })();\n  }\n  getDeviceMetadata(username) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      const authKeys = yield _this4.getAuthKeys(username);\n      const deviceKey = yield _this4.getKeyValueStorage().getItem(authKeys.deviceKey);\n      const deviceGroupKey = yield _this4.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n      const randomPassword = yield _this4.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n      return randomPassword ? {\n        deviceKey: deviceKey ?? undefined,\n        deviceGroupKey: deviceGroupKey ?? undefined,\n        randomPassword\n      } : null;\n    })();\n  }\n  clearDeviceMetadata(username) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const authKeys = yield _this5.getAuthKeys(username);\n      yield Promise.all([_this5.getKeyValueStorage().removeItem(authKeys.deviceKey), _this5.getKeyValueStorage().removeItem(authKeys.deviceGroupKey), _this5.getKeyValueStorage().removeItem(authKeys.randomPasswordKey)]);\n    })();\n  }\n  getAuthKeys(username) {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      assertTokenProviderConfig(_this6.authConfig?.Cognito);\n      const lastAuthUser = username ?? (yield _this6.getLastAuthUser());\n      return createKeysForAuthStorage(_this6.name, `${_this6.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);\n    })();\n  }\n  getLastAuthUserKey() {\n    assertTokenProviderConfig(this.authConfig?.Cognito);\n    const identifier = this.authConfig.Cognito.userPoolClientId;\n    return `${this.name}.${identifier}.LastAuthUser`;\n  }\n  getLastAuthUser() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      const lastAuthUser = (yield _this7.getKeyValueStorage().getItem(_this7.getLastAuthUserKey())) ?? 'username';\n      return lastAuthUser;\n    })();\n  }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n  return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);\n};\nfunction getAuthStorageKeys(authKeys) {\n  const keys = Object.values({\n    ...authKeys\n  });\n  return (prefix, identifier) => keys.reduce((acc, authKey) => ({\n    ...acc,\n    [authKey]: `${prefix}.${identifier}.${authKey}`\n  }), {});\n}\nexport { DefaultTokenStore, createKeysForAuthStorage, getAuthStorageKeys };\n//# sourceMappingURL=TokenStore.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}