{"ast":null,"code":"import deepExtend from 'style-dictionary/lib/utils/deepExtend.js';\nimport flattenProperties from 'style-dictionary/lib/utils/flattenProperties.js';\nimport { defaultTheme } from './defaultTheme.mjs';\nimport { setupTokens, cssNameTransform, cssValue } from './utils.mjs';\nimport '@aws-amplify/core/internals/utils';\nimport '../utils/setUserAgent/constants.mjs';\nimport { isString } from '../utils/utils.mjs';\n\n// Internal Style Dictionary methods\n/**\n * This will take a design token and add some data to it for it\n * to be used in JS/CSS. It will create its CSS var name and update\n * the value to use a CSS var if it is a reference. It will also\n * add a `.toString()` method to make it easier to use in JS.\n *\n * We should see if there is a way to share this logic with style dictionary...\n */\nconst setupToken = ({\n  token,\n  path\n}) => {\n  const name = `--${cssNameTransform({\n    path\n  })}`;\n  const {\n    value: original\n  } = token;\n  const value = cssValue(token);\n  return {\n    name,\n    original,\n    path,\n    value,\n    toString: () => `var(${name})`\n  };\n};\n/**\n * Takes a set of keys and a color name and returns an object of design tokens,\n * used for applying a primary color at the theme level to our tokens.\n *\n * createColorPalette({keys: ['10','20',...], value: 'red'})\n * returns {\n *   10: { value: '{colors.red.10.value}' },\n *   20: { value: '{colors.red.20.value}' },\n *   ...\n * }\n */\nfunction createColorPalette({\n  keys,\n  value\n}) {\n  return keys.reduce((acc, key) => {\n    return {\n      ...acc,\n      [key]: {\n        value: `{colors.${value}.${key}.value}`\n      }\n    };\n  }, {});\n}\n/**\n * This will be used like `const myTheme = createTheme({})`\n * `myTheme` can then be passed to a Provider or the generated CSS\n * can be passed to a stylesheet at build-time or run-time.\n * const myTheme = createTheme({})\n * const myOtherTheme = createTheme({}, myTheme);\n */\nfunction createTheme(theme, DefaultTheme = defaultTheme) {\n  // merge theme and DefaultTheme to get a complete theme\n  // deepExtend is an internal Style Dictionary method\n  // that performs a deep merge on n objects. We could change\n  // this to another 3p deep merge solution too.\n  const mergedTheme = deepExtend([{}, DefaultTheme, theme]);\n  const {\n    primaryColor,\n    secondaryColor\n  } = mergedTheme;\n  // apply primaryColor and secondaryColor if present\n  if (isString(primaryColor)) {\n    mergedTheme.tokens.colors.primary = createColorPalette({\n      keys: Object.keys(mergedTheme.tokens.colors[primaryColor]),\n      value: primaryColor\n    });\n  }\n  if (isString(secondaryColor)) {\n    mergedTheme.tokens.colors.secondary = createColorPalette({\n      keys: Object.keys(mergedTheme.tokens.colors[secondaryColor]),\n      value: secondaryColor\n    });\n  }\n  // Setting up the tokens. This is similar to what Style Dictionary\n  // does. At the end of this, each token should have:\n  // - CSS variable name of itself\n  // - its value (reference to another CSS variable or raw value)\n  const tokens = setupTokens({\n    tokens: mergedTheme.tokens,\n    setupToken\n  }); // Setting the type here because setupTokens is recursive\n  const {\n    breakpoints,\n    name\n  } = mergedTheme;\n  // flattenProperties is another internal Style Dictionary function\n  // that creates an array of all tokens.\n  let cssText = `[data-amplify-theme=\"${name}\"] {\\n` + flattenProperties(tokens).map(token => `${token.name}: ${token.value};`).join('\\n') + `\\n}\\n`;\n  let overrides = [];\n  /**\n   * For each override, we setup the tokens and then generate the CSS.\n   * This allows us to have one single CSS string for all possible overrides\n   * and avoid re-renders in React, but also support other frameworks as well.\n   */\n  if (mergedTheme.overrides) {\n    overrides = mergedTheme.overrides.map(override => {\n      const tokens = setupTokens({\n        tokens: override.tokens,\n        setupToken\n      });\n      const customProperties = flattenProperties(tokens).map(token => `${token.name}: ${token.value};`).join('\\n');\n      // Overrides can have a selector, media query, breakpoint, or color mode\n      // for creating the selector\n      if ('selector' in override) {\n        cssText += `\\n${override.selector} {\\n${customProperties}\\n}\\n`;\n      }\n      if ('mediaQuery' in override) {\n        cssText += `\\n@media (${override.mediaQuery}) {\n  [data-amplify-theme=\"${name}\"] {\n    ${customProperties}\n  }\n}\\n`;\n      }\n      if ('breakpoint' in override) {\n        const breakpoint = mergedTheme.breakpoints.values[override.breakpoint];\n        cssText += `\\n@media (min-width: ${breakpoint}px) {\n  [data-amplify-theme=\"${name}\"] {\n    ${customProperties}\n  }\n}\\n`;\n      }\n      if ('colorMode' in override) {\n        cssText += `\\n@media (prefers-color-scheme: ${override.colorMode}) {\n          [data-amplify-theme=\"${name}\"][data-amplify-color-mode=\"system\"] {\n            ${customProperties}\n            color-scheme: ${override.colorMode};\n          }\n        }\\n`;\n        cssText += `\\n[data-amplify-theme=\"${name}\"][data-amplify-color-mode=\"${override.colorMode}\"] {\n          ${customProperties}\n          color-scheme: ${override.colorMode};\n        }\\n`;\n      }\n      return {\n        ...override,\n        tokens\n      };\n    });\n  }\n  return {\n    tokens,\n    breakpoints,\n    name,\n    cssText,\n    // keep overrides separate from base theme\n    // this allows web platforms to use plain CSS scoped to a\n    // selector and only override the CSS vars needed. This\n    // means we could generate CSS at build-time in a postcss\n    // plugin, or do it at runtime and inject the CSS into a\n    // style tag.\n    // This also allows RN to dynamically switch themes in a\n    // provider.\n    overrides\n  };\n}\nexport { createTheme };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}