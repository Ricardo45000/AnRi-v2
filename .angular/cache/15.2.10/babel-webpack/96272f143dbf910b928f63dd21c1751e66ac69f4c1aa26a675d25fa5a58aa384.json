{"ast":null,"code":"import { HttpClient } from '@angular/common/http';\nimport { catchError, map, of } from 'rxjs';\nimport bcrypt from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let AuthserviceService = /*#__PURE__*/(() => {\n  class AuthserviceService {\n    http;\n    connected = false;\n    myProfilePicture;\n    myQrCode;\n    myTable;\n    myName;\n    myLogo;\n    id;\n    constructor(http) {\n      this.http = http;\n      // Check localStorage for stored authentication state\n      this.connected = localStorage.getItem('connected') === 'true';\n      // Load other user data from localStorage\n      this.loadUserData();\n    }\n    signIn(username, password) {\n      this.id = username;\n      const url = 'https://tsy94v6k27.execute-api.eu-west-3.amazonaws.com/prod/connexion';\n      const body = JSON.stringify({\n        username,\n        password\n      });\n      return this.http.post(url, body).pipe(map(response => {\n        const user = response;\n        if (user && this.verifyPassword(password, user.fields.Password)) {\n          this.connected = true;\n          this.myTable = user.fields.Table;\n          this.myProfilePicture = user.fields.Image[0].url;\n          this.myQrCode = user.fields.QrCode;\n          this.myName = user.fields.Name;\n          this.myLogo = user.fields.Logo[0].url;\n          // Save other user data to localStorage\n          this.saveUserData();\n          return true;\n        } else {\n          this.connected = false;\n          return false;\n        }\n      }), catchError(error => {\n        console.error('Error during sign-in:', error);\n        return of(false);\n      }));\n    }\n    checkConnection() {\n      const url = `https://tsy94v6k27.execute-api.eu-west-3.amazonaws.com/prod/informations`;\n      const body = JSON.stringify({\n        \"username\": this.id\n      });\n      this.http.post(url, body).pipe(catchError(error => {\n        console.error('Error fetching profile picture:', error);\n        this.connected = false;\n        return of(false); // Assuming 'of' is imported from 'rxjs'\n      }), map(response => {\n        const profilePictureUrl = response?.Image[0]?.url || null;\n        const myLogo = response?.Logo[0]?.url || null;\n        localStorage.setItem('myProfilePicture', profilePictureUrl);\n        this.myProfilePicture = profilePictureUrl;\n        localStorage.setItem('myLogo', myLogo);\n        this.myLogo = myLogo;\n        this.connected = true;\n        return this.connected;\n      })).subscribe();\n      return this.connected;\n    }\n    disconnect() {\n      this.connected = false;\n      localStorage.removeItem('connected');\n      localStorage.removeItem('id');\n      localStorage.removeItem('myTable');\n      localStorage.removeItem('myProfilePicture');\n      localStorage.removeItem('myName');\n      localStorage.removeItem('qrcode');\n      localStorage.removeItem('myLogo');\n    }\n    saveUserData() {\n      localStorage.setItem('connected', 'true');\n      localStorage.setItem('id', this.id);\n      localStorage.setItem('qrcode', this.myQrCode);\n      localStorage.setItem('myTable', this.myTable);\n      localStorage.setItem('myProfilePicture', this.myProfilePicture);\n      localStorage.setItem('myName', this.myName);\n      localStorage.setItem('myLogo', this.myLogo);\n    }\n    loadUserData() {\n      this.id = localStorage.getItem('id');\n      this.myQrCode = localStorage.getItem('qrcode');\n      this.myTable = localStorage.getItem('myTable');\n      this.myProfilePicture = localStorage.getItem('myProfilePicture');\n      this.myName = localStorage.getItem('myName');\n      this.myLogo = localStorage.getItem('myLogo');\n    }\n    // Function to verify the entered password against the stored hash\n    verifyPassword(enteredPassword, storedHashedPassword) {\n      return bcrypt.compareSync(enteredPassword, storedHashedPassword);\n    }\n    /** ---------------------------------------- AMAZON ------------------------------------------ */\n    signinwithamazon(username, password) {\n      this.id = username;\n      const url = 'https://tsy94v6k27.execute-api.eu-west-3.amazonaws.com/prod/connexion';\n      const body = JSON.stringify({\n        username\n      });\n      return this.http.post(url, body).pipe(map(response => {\n        const user = response;\n        this.connected = true;\n        this.myTable = user.fields.Table;\n        this.myProfilePicture = user.fields.Image[0].url;\n        this.myQrCode = user.fields.QrCode;\n        this.myName = user.fields.Name;\n        this.myLogo = user.fields.Logo[0].url;\n        // Save other user data to localStorage\n        this.saveUserData();\n        return true;\n      }), catchError(error => {\n        console.error('Error during sign-in:', error);\n        return of(false);\n      }));\n    }\n    static ɵfac = function AuthserviceService_Factory(t) {\n      return new (t || AuthserviceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthserviceService,\n      factory: AuthserviceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return AuthserviceService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}