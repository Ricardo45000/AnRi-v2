{"ast":null,"code":"import { Router } from '@angular/router';\nimport Chart from 'chart.js';\nimport { AirtableService } from 'environments/airtable/airtable.service';\nimport { AuthserviceService } from 'environments/airtable/authservice.service';\nimport { ChartService } from './service/chart.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"environments/airtable/airtable.service\";\nimport * as i2 from \"environments/airtable/authservice.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"./service/chart.service\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nimport * as i7 from \"@ngx-translate/core\";\nfunction ChartsComponent_i_72_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 36);\n  }\n}\nfunction ChartsComponent_ng_template_73_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"i\", 37);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"btn-primary\": a0,\n    \"btn-danger\": a1\n  };\n};\nconst _c1 = function (a0, a1) {\n  return {\n    \"icon-positive\": a0,\n    \"icon-negative\": a1\n  };\n};\nexport let ChartsComponent = /*#__PURE__*/(() => {\n  class ChartsComponent {\n    airtableService;\n    authService;\n    router;\n    chartService;\n    absoluteNumber;\n    percentage;\n    isPositive;\n    isNegative;\n    gradientStroke;\n    chartColor = \"#FFFFFF\";\n    canvas;\n    ctx;\n    gradientFill;\n    gradientChartOptionsConfiguration;\n    gradientChartOptionsConfigurationWithNumbersAndGrid;\n    chartBar;\n    chartLine;\n    Users = [];\n    now = new Date();\n    now1 = new Date(this.now.getFullYear() + \"-01-02\");\n    now2 = new Date(this.now.getFullYear() + \"-06-30\");\n    now3 = new Date(this.now.getFullYear() + \"-07-01\");\n    now4 = new Date(this.now.getFullYear() + \"-12-31\");\n    constructor(airtableService, authService, router, chartService) {\n      this.airtableService = airtableService;\n      this.authService = authService;\n      this.router = router;\n      this.chartService = chartService;\n    }\n    ngOnInit() {\n      if (this.authService.checkConnection()) {\n        this.airtableService.getRecords().then(records => {\n          this.Users = records;\n          this.initialisation();\n        });\n      } else {\n        this.router.navigate(['/pages/lock']);\n      }\n    }\n    //------------------------------------- Set Charts --------------------------------------\n    setupGradient() {\n      this.gradientStroke = this.ctx.createLinearGradient(0, 10, 0, 75);\n      this.gradientStroke.addColorStop(0, '#6bd098');\n      this.gradientStroke.addColorStop(1, this.chartColor);\n      this.gradientFill = this.ctx.createLinearGradient(0, 10, 0, 75);\n      this.gradientFill.addColorStop(0, '#f17e5d');\n      this.gradientFill.addColorStop(1, this.chartColor);\n    }\n    setupLineChart() {\n      this.canvas = document.getElementById(\"chartLine\");\n      this.canvas.height = 300;\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.setupGradient();\n      this.chartLine = new Chart(this.ctx, {\n        type: 'line',\n        data: {\n          labels: [\"W01/W27\", \"W02/W28\", \"W03/W29\", \"W04/W30\", \"W05/W31\", \"W06/W32\", \"W07/W33\", \"W08/W34\", \"W09/W35\", \"W10/W36\", \"W11/W37\", \"W12/W38\", \"W13/W39\", \"W14/W40\", \"W15/W41\", \"W16/W42\", \"W17/W43\", \"W18/W44\", \"W19/W45\", \"W20/W46\", \"W21/W47\", \"W22/W48\", \"W23/W49\", \"W24/W50\", \"W25/W51\", \"W26/W52\"],\n          datasets: [{\n            label: \"Week 1 - Week 26\",\n            borderColor: \"#6bd098\",\n            backgroundColor: this.gradientStroke,\n            pointRadius: 2,\n            pointHoverRadius: 5,\n            borderWidth: 3,\n            data: Object.values(this.countDatesInRange(this.now1, this.now2, 'week')) //count reviews per month on the first range time\n          }, {\n            label: \"Week 27 - Week 52\",\n            borderColor: \"#f17e5d\",\n            backgroundColor: this.gradientFill,\n            pointRadius: 2,\n            pointHoverRadius: 5,\n            borderWidth: 3,\n            data: Object.values(this.countDatesInRange(this.now3, this.now4, 'week')) //count reviews per month on the first range time\n          }]\n        },\n\n        options: {\n          responsive: true,\n          maintainAspectRatio: false,\n          legend: {\n            display: true,\n            position: \"bottom\"\n          },\n          tooltips: {\n            enabled: true\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                fontColor: \"#9f9f9f\",\n                beginAtZero: false,\n                maxTicksLimit: 5,\n                stepSize: 1\n                //padding: 20\n              },\n\n              gridLines: {\n                drawBorder: false,\n                zeroLineColor: \"transparent\",\n                color: 'rgba(255,255,255,0.05)'\n              }\n            }],\n            dataset: [{\n              barPercentage: 1.6,\n              gridLines: {\n                drawBorder: false,\n                color: 'rgba(255,255,255,0.1)',\n                zeroLineColor: \"transparent\",\n                display: false\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9f9f9f\"\n              }\n            }]\n          }\n        }\n      });\n    }\n    setupBarChart() {\n      this.canvas = document.getElementById(\"activity\");\n      this.ctx = this.canvas.getContext(\"2d\");\n      this.chartBar = new Chart(this.ctx, {\n        type: 'bar',\n        data: {\n          datasets: [{\n            label: \"Week 1 - Week 26\",\n            borderColor: '#6bd098',\n            fill: true,\n            backgroundColor: '#6bd098',\n            hoverBorderColor: '#6bd098',\n            borderWidth: 8,\n            data: [Object.values(this.countDatesInRange(this.now1, this.now2, 'week')).reduce((acc, value) => acc + value, 0)]\n          }, {\n            label: \"Week 26 - Week 53\",\n            borderColor: '#f17e5d',\n            fill: true,\n            backgroundColor: '#f17e5d',\n            hoverBorderColor: '#f17e5d',\n            borderWidth: 8,\n            data: [Object.values(this.countDatesInRange(this.now3, this.now4, 'week')).reduce((acc, value) => acc + value, 0)]\n          }]\n        },\n        options: {\n          legend: {\n            display: true,\n            position: \"bottom\"\n          },\n          scales: {\n            yAxes: [{\n              ticks: {\n                fontColor: \"#9f9f9f\",\n                fontStyle: \"bold\",\n                beginAtZero: true,\n                maxTicksLimit: 5,\n                padding: 20\n              },\n              gridLines: {\n                zeroLineColor: \"transparent\",\n                display: true,\n                drawBorder: false,\n                color: '#9f9f9f'\n              }\n            }],\n            dataset: [{\n              barPercentage: 0.4,\n              gridLines: {\n                zeroLineColor: \"white\",\n                display: false,\n                drawBorder: false,\n                color: 'transparent'\n              },\n              ticks: {\n                padding: 20,\n                fontColor: \"#9f9f9f\",\n                fontStyle: \"bold\"\n              }\n            }]\n          }\n        }\n      });\n    }\n    //------------------------------------ Initialisation -----------------------------------\n    initialisation() {\n      this.setupLineChart();\n      this.setupBarChart();\n      var absoluteNumber1 = this.chartBar.data.datasets[0].data[0];\n      var absoluteNumber2 = this.chartBar.data.datasets[1].data[0];\n      this.absoluteNumber = absoluteNumber2 - absoluteNumber1;\n      // Replace these with your actual calculations\n      this.percentage = Number(((absoluteNumber2 - absoluteNumber1) * 100 / absoluteNumber1).toFixed(2));\n      // Determine if the percentage is positive or negative\n      this.isPositive = this.percentage >= 0;\n      this.isNegative = this.percentage < 0;\n    }\n    //-----------------------------------------REAL UPDATE-------------------------------------\n    realUpdate() {\n      const unit = document.getElementById('unit').value;\n      if (unit && ['day', 'week', 'month', 'year'].includes(unit)) {\n        this.updateCharts(unit);\n      }\n    }\n    calculateNumbersAndPercentage() {\n      const absoluteNumber1 = this.chartBar.data.datasets[0].data[0];\n      const absoluteNumber2 = this.chartBar.data.datasets[1].data[0];\n      this.absoluteNumber = absoluteNumber2 - absoluteNumber1;\n      // Replace these with your actual calculations\n      this.percentage = Number(((absoluteNumber2 - absoluteNumber1) * 100 / absoluteNumber1).toFixed(2)) || null;\n      // Determine if the percentage is positive or negative\n      this.isPositive = this.percentage >= 0;\n      this.isNegative = this.percentage < 0;\n    }\n    countDatesInRange(startDate, endDate, timeUnit) {\n      const counts = {};\n      const stepFnMap = {\n        'day': date => `${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}-${date.getFullYear()}`,\n        'week': date => `W${String(this.chartService.getISOWeek(date)).padStart(2, '0')}`,\n        'month': date => `${String(date.getMonth() + 1).padStart(2, '0')}-${date.getFullYear()}`,\n        'year': date => `${date.getFullYear()}`\n      };\n      const stepFn = stepFnMap[timeUnit];\n      // Initialize counts for all possible date keys within the date range\n      for (let d = new Date(startDate); d <= endDate; this.chartService.incrementDate(d, timeUnit)) {\n        const key = stepFn(d);\n        counts[key] = 0;\n      }\n      // Update counts based on user dates\n      this.Users.forEach(user => {\n        const date = user.date ? new Date(user.date) : null;\n        if (date && date >= startDate && date <= endDate) {\n          const key = stepFn(date);\n          counts[key]++;\n        }\n      });\n      return counts;\n    }\n    updateCharts(timeUnit) {\n      const startDateInput1 = new Date(document.getElementById('startDate1').value);\n      const endDateInput1 = new Date(document.getElementById('endDate1').value);\n      const startDateInput2 = new Date(document.getElementById('startDate2').value);\n      const endDateInput2 = new Date(document.getElementById('endDate2').value);\n      if (startDateInput1 && endDateInput1 && startDateInput2 && endDateInput2) {\n        const result1BarPie = [Object.values(this.countDatesInRange(startDateInput1, endDateInput1, timeUnit)).reduce((acc, value) => acc + value, 0)];\n        this.chartBar.data.datasets[0].data = result1BarPie;\n        const result2BarPie = [Object.values(this.countDatesInRange(startDateInput2, endDateInput2, timeUnit)).reduce((acc, value) => acc + value, 0)];\n        this.chartBar.data.datasets[1].data = result2BarPie;\n        this.absoluteNumber = result2BarPie[0] - result1BarPie[0];\n        this.chartLine.data.datasets[0].data = Object.values(this.countDatesInRange(startDateInput1, endDateInput1, timeUnit));\n        this.chartLine.data.datasets[1].data = Object.values(this.countDatesInRange(startDateInput2, endDateInput2, timeUnit));\n        const firstList = Object.keys(this.countDatesInRange(startDateInput1, endDateInput1, timeUnit));\n        const secondList = Object.keys(this.countDatesInRange(startDateInput2, endDateInput2, timeUnit));\n        this.chartBar.data.labels = this.chartService.getLabelForChart(timeUnit, firstList, secondList);\n        this.chartBar.data.datasets[0].label = this.chartLine.data.datasets[0].label = this.chartService.getLabelForDataset(firstList);\n        this.chartBar.data.datasets[1].label = this.chartLine.data.datasets[1].label = this.chartService.getLabelForDataset(secondList);\n        this.chartLine.data.labels = this.chartService.mixLists(firstList, secondList);\n        // Update charts\n        this.chartBar.update();\n        this.chartLine.update();\n        this.calculateNumbersAndPercentage();\n      }\n    }\n    static ɵfac = function ChartsComponent_Factory(t) {\n      return new (t || ChartsComponent)(i0.ɵɵdirectiveInject(i1.AirtableService), i0.ɵɵdirectiveInject(i2.AuthserviceService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ChartService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ChartsComponent,\n      selectors: [[\"charts-cmp\"]],\n      decls: 75,\n      vars: 53,\n      consts: [[1, \"main-content\"], [1, \"row\"], [1, \"col-md-4\"], [\"id\", \"dateRangePicker\"], [\"for\", \"unit\", 2, \"padding\", \"10px\"], [\"name\", \"Unit\", \"id\", \"unit\", 2, \"width\", \"40%\", 3, \"change\"], [\"value\", \"day\"], [\"selected\", \"selected\", \"value\", \"week\"], [\"value\", \"month\"], [\"value\", \"year\"], [\"for\", \"startDate1\", 2, \"padding\", \"10px\"], [\"type\", \"date\", \"id\", \"startDate1\", 2, \"width\", \"30%\", 3, \"value\", \"change\"], [\"for\", \"endDate1\", 2, \"padding\", \"10px\"], [\"type\", \"date\", \"id\", \"endDate1\", 2, \"width\", \"30%\", 3, \"value\", \"change\"], [\"for\", \"startDate2\", 2, \"padding\", \"10px\"], [\"type\", \"date\", \"id\", \"startDate2\", 2, \"width\", \"30%\", 3, \"value\", \"change\"], [\"for\", \"endDate2\", 2, \"padding\", \"10px\"], [\"type\", \"date\", \"id\", \"endDate2\", 2, \"width\", \"30%\", 3, \"value\", \"change\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\", \"text-center\"], [1, \"card-body\"], [\"id\", \"chartLine\"], [1, \"row\", \"align-items-stretch\"], [1, \"col-md-6\", \"mb-4\"], [1, \"card\", \"car-chart\", \"h-100\"], [\"id\", \"activity\"], [1, \"card\", \"card-pricing\", \"h-100\"], [1, \"row\", \"align-items-center\"], [1, \"col-sm-12\"], [1, \"card-title\"], [\"href\", \"javascript:void(0)\", 1, \"btn\", \"btn-round\", \"btn-lg\", 3, \"ngClass\"], [1, \"card-icon\", 2, \"transform\", \"scale(0.5)\", 3, \"ngClass\"], [\"class\", \"nc-icon nc-minimal-up text-success\", 4, \"ngIf\", \"ngIfElse\"], [\"negativeIcon\", \"\"], [1, \"nc-icon\", \"nc-minimal-up\", \"text-success\"], [1, \"nc-icon\", \"nc-minimal-down\", \"text-danger\"]],\n      template: function ChartsComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"label\", 4);\n          i0.ɵɵtext(5);\n          i0.ɵɵpipe(6, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"select\", 5);\n          i0.ɵɵlistener(\"change\", function ChartsComponent_Template_select_change_7_listener() {\n            return ctx.realUpdate();\n          });\n          i0.ɵɵelementStart(8, \"option\", 6);\n          i0.ɵɵtext(9);\n          i0.ɵɵpipe(10, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(11, \"option\", 7);\n          i0.ɵɵtext(12);\n          i0.ɵɵpipe(13, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(14, \"option\", 8);\n          i0.ɵɵtext(15);\n          i0.ɵɵpipe(16, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(17, \"option\", 9);\n          i0.ɵɵtext(18);\n          i0.ɵɵpipe(19, \"translate\");\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(20, \"div\", 2)(21, \"div\", 3)(22, \"label\", 10);\n          i0.ɵɵtext(23);\n          i0.ɵɵpipe(24, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(25, \"input\", 11);\n          i0.ɵɵlistener(\"change\", function ChartsComponent_Template_input_change_25_listener() {\n            return ctx.realUpdate();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(26, \"label\", 12);\n          i0.ɵɵtext(27);\n          i0.ɵɵpipe(28, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(29, \"input\", 13);\n          i0.ɵɵlistener(\"change\", function ChartsComponent_Template_input_change_29_listener() {\n            return ctx.realUpdate();\n          });\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(30, \"div\", 2)(31, \"label\", 14);\n          i0.ɵɵtext(32);\n          i0.ɵɵpipe(33, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(34, \"input\", 15);\n          i0.ɵɵlistener(\"change\", function ChartsComponent_Template_input_change_34_listener() {\n            return ctx.realUpdate();\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(35, \"label\", 16);\n          i0.ɵɵtext(36);\n          i0.ɵɵpipe(37, \"translate\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(38, \"input\", 17);\n          i0.ɵɵlistener(\"change\", function ChartsComponent_Template_input_change_38_listener() {\n            return ctx.realUpdate();\n          });\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(39, \"div\", 18)(40, \"div\", 19)(41, \"div\", 20)(42, \"h5\", 21);\n          i0.ɵɵtext(43);\n          i0.ɵɵpipe(44, \"translate\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(45, \"div\", 22);\n          i0.ɵɵelement(46, \"canvas\", 23);\n          i0.ɵɵelementEnd()()()();\n          i0.ɵɵelementStart(47, \"div\", 24)(48, \"div\", 25)(49, \"div\", 26)(50, \"div\", 20)(51, \"h5\", 21);\n          i0.ɵɵtext(52);\n          i0.ɵɵpipe(53, \"translate\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(54, \"div\", 22);\n          i0.ɵɵelement(55, \"canvas\", 27);\n          i0.ɵɵelementEnd()()();\n          i0.ɵɵelementStart(56, \"div\", 25)(57, \"div\", 28)(58, \"div\", 20)(59, \"h5\", 21);\n          i0.ɵɵtext(60);\n          i0.ɵɵpipe(61, \"translate\");\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(62, \"div\", 22)(63, \"div\", 29)(64, \"div\", 30)(65, \"h2\", 31);\n          i0.ɵɵtext(66);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(67, \"div\", 30)(68, \"a\", 32);\n          i0.ɵɵtext(69);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(70, \"div\", 30)(71, \"div\", 33);\n          i0.ɵɵtemplate(72, ChartsComponent_i_72_Template, 1, 0, \"i\", 34);\n          i0.ɵɵtemplate(73, ChartsComponent_ng_template_73_Template, 1, 0, \"ng-template\", null, 35, i0.ɵɵtemplateRefExtractor);\n          i0.ɵɵelementEnd()()()()()()()();\n        }\n        if (rf & 2) {\n          const _r1 = i0.ɵɵreference(74);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(6, 23, \"Unit\"), \": \");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(10, 25, \"Day\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(13, 27, \"Week\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(16, 29, \"Month\"));\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(19, 31, \"Year\"));\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(24, 33, \"From\"), \": \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.now1.toISOString().split(\"T\")[0]);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(28, 35, \"to\"), \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.now2.toISOString().split(\"T\")[0]);\n          i0.ɵɵadvance(3);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(33, 37, \"From\"), \": \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.now3.toISOString().split(\"T\")[0]);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind1(37, 39, \"to\"), \" \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"value\", ctx.now4.toISOString().split(\"T\")[0]);\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(44, 41, \"ComparisonTable\"), \" \");\n          i0.ɵɵadvance(9);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(53, 43, \"GapDifference\"), \" \");\n          i0.ɵɵadvance(8);\n          i0.ɵɵtextInterpolate1(\"\", i0.ɵɵpipeBind1(61, 45, \"NumericalComparative\"), \" \");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" \", ctx.absoluteNumber, \"\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(47, _c0, ctx.isPositive, ctx.isNegative));\n          i0.ɵɵadvance(1);\n          i0.ɵɵtextInterpolate2(\" \", ctx.isPositive ? \"+\" : \"\", \"\", ctx.percentage, \"% \");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(50, _c1, ctx.isPositive, ctx.isNegative));\n          i0.ɵɵadvance(1);\n          i0.ɵɵproperty(\"ngIf\", ctx.isPositive)(\"ngIfElse\", _r1);\n        }\n      },\n      dependencies: [i5.NgClass, i5.NgIf, i6.NgSelectOption, i6.ɵNgSelectMultipleOption, i7.TranslatePipe],\n      encapsulation: 2\n    });\n  }\n  return ChartsComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}