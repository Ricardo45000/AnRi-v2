{"ast":null,"code":"const getRoute = (state, actorState) => {\n  // 'federatedSignIn' exists as a state on both the 'signInActor' and 'signUpActor',\n  // match against the `actorState` initially to determine if the federated sign in flow\n  // has begun, then which actor has begun the flow and return the corresponding `route`\n  if (actorState?.matches('federatedSignIn')) {\n    if (state.matches('signUpActor')) {\n      return 'signUp';\n    }\n    if (state.matches('signInActor')) {\n      return 'signIn';\n    }\n  }\n  switch (true) {\n    case state.matches('idle'):\n      return 'idle';\n    case state.matches('setup'):\n      return 'setup';\n    case state.matches('signOut'):\n      return 'signOut';\n    case state.matches('authenticated'):\n      return 'authenticated';\n    case actorState?.matches('confirmSignUp'):\n    case actorState?.matches('resendSignUpCode'):\n      return 'confirmSignUp';\n    case actorState?.matches('confirmSignIn'):\n      return 'confirmSignIn';\n    case actorState?.matches('setupTotp.edit'):\n    case actorState?.matches('setupTotp.submit'):\n      return 'setupTotp';\n    case actorState?.matches('signIn'):\n      return 'signIn';\n    case actorState?.matches('signUp'):\n    case actorState?.matches('autoSignIn'):\n      return 'signUp';\n    case actorState?.matches('forceChangePassword'):\n      return 'forceNewPassword';\n    case actorState?.matches('forgotPassword'):\n      return 'forgotPassword';\n    case actorState?.matches('confirmResetPassword'):\n      return 'confirmResetPassword';\n    case actorState?.matches('selectUserAttributes'):\n      return 'verifyUser';\n    case actorState?.matches('confirmVerifyUserAttribute'):\n      return 'confirmVerifyUser';\n    case state.matches('getCurrentUser'):\n    case actorState?.matches('fetchUserAttributes'):\n      /**\n       * This route is needed for autoSignIn to capture both the\n       * autoSignIn.pending and the resolved states when the\n       * signIn actor is running.\n       */\n      return 'transition';\n    default:\n      return null;\n  }\n};\nexport { getRoute };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}