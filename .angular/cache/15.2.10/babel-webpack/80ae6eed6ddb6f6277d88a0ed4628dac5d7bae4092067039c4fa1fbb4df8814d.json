{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { getDnsSuffix } from '../../clients/endpoints/getDnsSuffix.mjs';\nimport { unauthenticatedHandler } from '../../clients/handlers/unauthenticated.mjs';\nimport { jitteredBackoff } from '../../clients/middleware/retry/jitteredBackoff.mjs';\nimport { getRetryDecider } from '../../clients/middleware/retry/defaultRetryDecider.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport { AmplifyUrl } from '../../utils/amplifyUrl/index.mjs';\nimport { composeTransferHandler } from '../../clients/internal/composeTransferHandler.mjs';\nimport { parseJsonError } from '../../clients/serde/json.mjs';\nimport { getAmplifyUserAgent } from '../../Platform/index.mjs';\nimport { observeFrameworkChanges } from '../../Platform/detectFramework.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The service name used to sign requests if the API requires authentication.\n */\nconst SERVICE_NAME = 'cognito-identity';\n/**\n * The endpoint resolver function that returns the endpoint URL for a given region.\n */\nconst endpointResolver = ({\n  region\n}) => ({\n  url: new AmplifyUrl(`https://cognito-identity.${region}.${getDnsSuffix(region)}`)\n});\n/**\n * A Cognito Identity-specific middleware that disables caching for all requests.\n */\nconst disableCacheMiddlewareFactory = () => next => /*#__PURE__*/function () {\n  var _disableCacheMiddleware = _asyncToGenerator(function* (request) {\n    request.headers['cache-control'] = 'no-store';\n    return next(request);\n  });\n  function disableCacheMiddleware(_x) {\n    return _disableCacheMiddleware.apply(this, arguments);\n  }\n  return disableCacheMiddleware;\n}();\n/**\n * A Cognito Identity-specific transfer handler that does NOT sign requests, and\n * disables caching.\n *\n * @internal\n */\nconst cognitoIdentityTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);\n/**\n * @internal\n */\nconst defaultConfig = {\n  service: SERVICE_NAME,\n  endpointResolver,\n  retryDecider: getRetryDecider(parseJsonError),\n  computeDelay: jitteredBackoff,\n  userAgentValue: getAmplifyUserAgent(),\n  cache: 'no-store'\n};\nobserveFrameworkChanges(() => {\n  defaultConfig.userAgentValue = getAmplifyUserAgent();\n});\n/**\n * @internal\n */\nconst getSharedHeaders = operation => ({\n  'content-type': 'application/x-amz-json-1.1',\n  'x-amz-target': `AWSCognitoIdentityService.${operation}`\n});\n/**\n * @internal\n */\nconst buildHttpRpcRequest = ({\n  url\n}, headers, body) => ({\n  headers,\n  url,\n  body,\n  method: 'POST'\n});\nexport { buildHttpRpcRequest, cognitoIdentityTransferHandler, defaultConfig, getSharedHeaders };\n//# sourceMappingURL=base.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}