{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { amplifyUuid } from '../../../utils/amplifyUuid/index.mjs';\nimport '../../../Cache/index.mjs';\nimport { resolveEndpointId } from '../utils/resolveEndpointId.mjs';\nimport '../../../utils/sessionListener/index.mjs';\nimport { BUFFER_SIZE, FLUSH_INTERVAL, FLUSH_SIZE, RESEND_LIMIT } from '../utils/constants.mjs';\nimport { getEventBuffer } from '../utils/getEventBuffer.mjs';\nimport { SESSION_STOP_EVENT, SESSION_START_EVENT } from '../../../utils/sessionListener/constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nlet session;\n/**\n * @internal\n */\nconst record = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    appId,\n    category,\n    channelType,\n    credentials,\n    event,\n    identityId,\n    region,\n    userAgentValue,\n    bufferSize,\n    flushInterval,\n    flushSize,\n    resendLimit\n  }) {\n    let eventSession = session;\n    const currentTime = new Date();\n    const timestampISOString = currentTime.toISOString();\n    const eventId = amplifyUuid();\n    // Prepare event buffer if required\n    const buffer = getEventBuffer({\n      appId,\n      region,\n      credentials,\n      bufferSize: bufferSize ?? BUFFER_SIZE,\n      flushInterval: flushInterval ?? FLUSH_INTERVAL,\n      flushSize: flushSize ?? FLUSH_SIZE,\n      resendLimit: resendLimit ?? RESEND_LIMIT,\n      identityId,\n      userAgentValue\n    });\n    const endpointId = yield resolveEndpointId({\n      appId,\n      category,\n      channelType,\n      credentials,\n      identityId,\n      region,\n      userAgentValue\n    });\n    // Generate session if required\n    if (!eventSession || event.name === SESSION_START_EVENT) {\n      const sessionId = amplifyUuid();\n      session = {\n        Id: sessionId,\n        StartTimestamp: timestampISOString\n      };\n      eventSession = session;\n    }\n    // Terminate session when required\n    if (session && event.name === SESSION_STOP_EVENT) {\n      eventSession = {\n        ...session,\n        StopTimestamp: timestampISOString,\n        Duration: currentTime.getTime() - new Date(session.StartTimestamp).getTime()\n      };\n      session = undefined;\n    }\n    // Push event to buffer\n    buffer.push({\n      eventId,\n      endpointId,\n      event,\n      session: eventSession,\n      timestamp: timestampISOString,\n      resendLimit: resendLimit ?? RESEND_LIMIT\n    });\n  });\n  return function record(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { record };\n//# sourceMappingURL=record.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}