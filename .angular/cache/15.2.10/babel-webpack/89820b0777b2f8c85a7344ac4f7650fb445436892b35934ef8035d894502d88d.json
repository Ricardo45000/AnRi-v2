{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { listDevices } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n// Cognito Documentation for max device\n// https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ListDevices.html#API_ListDevices_RequestSyntax\nconst MAX_DEVICES = 60;\n/**\n * Fetches devices that have been remembered using {@link rememberDevice}\n * for the currently authenticated user.\n *\n * @returns FetchDevicesOutput\n * @throws {@link ListDevicesException}\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction fetchDevices() {\n  return _fetchDevices.apply(this, arguments);\n}\nfunction _fetchDevices() {\n  _fetchDevices = _asyncToGenerator(function* () {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      tokens\n    } = yield fetchAuthSession();\n    assertAuthTokens(tokens);\n    const response = yield listDevices({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.FetchDevices)\n    }, {\n      AccessToken: tokens.accessToken.toString(),\n      Limit: MAX_DEVICES\n    });\n    return parseDevicesResponse(response.Devices ?? []);\n  });\n  return _fetchDevices.apply(this, arguments);\n}\nconst parseDevicesResponse = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (devices) {\n    return devices.map(({\n      DeviceKey: id = '',\n      DeviceAttributes = [],\n      DeviceCreateDate,\n      DeviceLastModifiedDate,\n      DeviceLastAuthenticatedDate\n    }) => {\n      const attributes = DeviceAttributes.reduce((attrs, {\n        Name,\n        Value\n      }) => {\n        if (Name && Value) {\n          attrs[Name] = Value;\n        }\n        return attrs;\n      }, {});\n      return {\n        id,\n        attributes,\n        createDate: DeviceCreateDate ? new Date(DeviceCreateDate * 1000) : undefined,\n        lastModifiedDate: DeviceLastModifiedDate ? new Date(DeviceLastModifiedDate * 1000) : undefined,\n        lastAuthenticatedDate: DeviceLastAuthenticatedDate ? new Date(DeviceLastAuthenticatedDate * 1000) : undefined\n      };\n    });\n  });\n  return function parseDevicesResponse(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { fetchDevices };\n//# sourceMappingURL=fetchDevices.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}