{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getMFAType, getMFATypes } from '../utils/signInHelpers.mjs';\nimport { getUser } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Fetches the preferred MFA setting and enabled MFA settings for the user.\n *\n * @returns FetchMFAPreferenceOutput\n * @throws  -{@link GetUserException} : error thrown when the service fails to fetch MFA preference\n * and settings.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction fetchMFAPreference() {\n  return _fetchMFAPreference.apply(this, arguments);\n}\nfunction _fetchMFAPreference() {\n  _fetchMFAPreference = _asyncToGenerator(function* () {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      tokens\n    } = yield fetchAuthSession({\n      forceRefresh: false\n    });\n    assertAuthTokens(tokens);\n    const {\n      PreferredMfaSetting,\n      UserMFASettingList\n    } = yield getUser({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.FetchMFAPreference)\n    }, {\n      AccessToken: tokens.accessToken.toString()\n    });\n    return {\n      preferred: getMFAType(PreferredMfaSetting),\n      enabled: getMFATypes(UserMFASettingList)\n    };\n  });\n  return _fetchMFAPreference.apply(this, arguments);\n}\nexport { fetchMFAPreference };\n//# sourceMappingURL=fetchMFAPreference.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}