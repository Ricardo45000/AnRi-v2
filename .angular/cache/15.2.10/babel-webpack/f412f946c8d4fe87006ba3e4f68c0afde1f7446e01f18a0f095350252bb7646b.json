{"ast":null,"code":"import { from, Observable } from 'rxjs';\nimport '../utils/getClientInfo/getClientInfo.mjs';\nimport { isWebWorker } from '../utils/isWebWorker.mjs';\nimport '../utils/retry/retry.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nlet Reachability = /*#__PURE__*/(() => {\n  class Reachability {\n    networkMonitor(_) {\n      const globalObj = isWebWorker() ? self : typeof window !== 'undefined' && window;\n      if (!globalObj) {\n        return from([{\n          online: true\n        }]);\n      }\n      return new Observable(observer => {\n        observer.next({\n          online: globalObj.navigator.onLine\n        });\n        const notifyOnline = () => {\n          observer.next({\n            online: true\n          });\n        };\n        const notifyOffline = () => {\n          observer.next({\n            online: false\n          });\n        };\n        globalObj.addEventListener('online', notifyOnline);\n        globalObj.addEventListener('offline', notifyOffline);\n        Reachability._observers.push(observer);\n        return () => {\n          globalObj.removeEventListener('online', notifyOnline);\n          globalObj.removeEventListener('offline', notifyOffline);\n          Reachability._observers = Reachability._observers.filter(_observer => _observer !== observer);\n        };\n      });\n    }\n    // expose observers to simulate offline mode for integration testing\n    static _observerOverride(status) {\n      for (const observer of this._observers) {\n        if (observer.closed) {\n          this._observers = this._observers.filter(_observer => _observer !== observer);\n          continue;\n        }\n        observer?.next && observer.next(status);\n      }\n    }\n  }\n  Reachability._observers = [];\n  return Reachability;\n})();\nexport { Reachability };\n//# sourceMappingURL=Reachability.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}