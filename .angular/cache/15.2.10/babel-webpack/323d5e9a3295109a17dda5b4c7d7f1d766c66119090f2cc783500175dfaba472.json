{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nimport { Component, ElementRef, ViewChild } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AuthserviceService } from 'environments/airtable/authservice.service';\nimport ClipboardJS from 'clipboard';\nlet AppComponent = class AppComponent {\n  translate;\n  myQrCode;\n  myModal;\n  constructor(translate, authService) {\n    this.translate = translate;\n    this.translate.setDefaultLang('en');\n    const storedLang = localStorage.getItem('selectedLanguage');\n    translate.use(storedLang || translate.getDefaultLang());\n    this.myQrCode = authService.myQrCode;\n  }\n  ngAfterViewInit() {\n    this.initializeClipboard();\n  }\n  switchLanguage(language) {\n    this.translate.use(language);\n    localStorage.setItem('selectedLanguage', language);\n  }\n  printModalContent() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const printWindow = window.open('', '_blank');\n      const imgElement = new Image();\n      const blob = yield fetch(_this.myQrCode).then(response => response.blob());\n      const imgUrl = URL.createObjectURL(blob);\n      imgElement.onload = () => {\n        printWindow.document.write('<html><head><title>Print</title>');\n        printWindow.document.write('<style>');\n        printWindow.document.write('body { display: flex; justify-content: center; align-items: center; height: 100vh; margin: 0; }');\n        printWindow.document.write('</style>');\n        printWindow.document.write('</head><body>');\n        printWindow.document.write('<img src=\"' + imgUrl + '\" style=\"max-width: 100%; max-height: 100%;\" />');\n        printWindow.document.write('</body></html>');\n        printWindow.document.close();\n        printWindow.print();\n        printWindow.close();\n        // Revoke the Object URL to free up resources\n        URL.revokeObjectURL(imgUrl);\n      };\n      imgElement.src = imgUrl;\n    })();\n  }\n  initializeClipboard() {\n    const clipboard = new ClipboardJS('#copyButton', {\n      text: () => {\n        // Return the content to be copied (image URL)\n        return this.myQrCode;\n      }\n    });\n    clipboard.on('success', e => {\n      if (this.translate.currentLang == 'de') {\n        this.showNotification(\"top\", \"center\", \"success\", \"URL kopiert\");\n      } else {\n        if (this.translate.currentLang == 'fr') {\n          this.showNotification(\"top\", \"center\", \"success\", \"URL copiÃ©\");\n        } else {\n          this.showNotification(\"top\", \"center\", \"success\", \"URL copied\");\n        }\n      }\n      // You can add any additional feedback or actions here\n    });\n\n    clipboard.on('error', e => {\n      console.error('Failed to copy text to clipboard:', e.text);\n      console.error('Action:', e.action);\n      console.error('Trigger:', e.trigger);\n      // You can handle errors here\n    });\n  }\n\n  showNotification(from, align, type, message) {\n    $.notify({\n      icon: \"ti-gift\",\n      message: message\n    }, {\n      type: type,\n      timer: 1,\n      placement: {\n        from: from,\n        align: align\n      },\n      template: '<div data-notify=\"container\" class=\"col-11 col-md-4 alert alert-{0} alert-with-icon\" role=\"alert\"><button type=\"button\" aria-hidden=\"true\" class=\"close\" data-notify=\"dismiss\"><i class=\"nc-icon nc-simple-remove\"></i></button><span data-notify=\"icon\" class=\"nc-icon nc-bell-55\"></span> <span data-notify=\"title\">{1}</span> <span data-notify=\"message\">{2}</span><div class=\"progress\" data-notify=\"progressbar\"><div class=\"progress-bar progress-bar-{0}\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"></div></div><a href=\"{3}\" target=\"{4}\" data-notify=\"url\"></a></div>'\n    });\n  }\n};\n__decorate([ViewChild('myModal'), __metadata(\"design:type\", ElementRef)], AppComponent.prototype, \"myModal\", void 0);\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n}), __metadata(\"design:paramtypes\", [TranslateService, AuthserviceService])], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}