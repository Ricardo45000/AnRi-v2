{"ast":null,"code":"import { cryptoSecureRandomInt } from './cryptoSecureRandomInt.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Hex encoding strategy.\n * Converts a word array to a hex string.\n * @param {WordArray} wordArray The word array.\n * @return {string} The hex string.\n * @static\n */\nfunction hexStringify(wordArray) {\n  // Shortcuts\n  const {\n    words\n  } = wordArray;\n  const {\n    sigBytes\n  } = wordArray;\n  // Convert\n  const hexChars = [];\n  for (let i = 0; i < sigBytes; i++) {\n    const bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 0xff;\n    hexChars.push((bite >>> 4).toString(16));\n    hexChars.push((bite & 0x0f).toString(16));\n  }\n  return hexChars.join('');\n}\nclass WordArray {\n  constructor(words, sigBytes) {\n    this.words = [];\n    let Words = words;\n    Words = this.words = Words || [];\n    if (sigBytes !== undefined) {\n      this.sigBytes = sigBytes;\n    } else {\n      this.sigBytes = Words.length * 4;\n    }\n  }\n  random(nBytes) {\n    const words = [];\n    for (let i = 0; i < nBytes; i += 4) {\n      words.push(cryptoSecureRandomInt());\n    }\n    return new WordArray(words, nBytes);\n  }\n  toString() {\n    return hexStringify(this);\n  }\n}\nexport { WordArray as default };\n//# sourceMappingURL=WordArray.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}