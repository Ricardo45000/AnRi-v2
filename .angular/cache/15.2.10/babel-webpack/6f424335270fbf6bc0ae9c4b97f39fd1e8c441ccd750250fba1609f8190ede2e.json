{"ast":null,"code":"import { getActorState } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { isAuthFieldWithDefaults } from '../form.mjs';\nimport { getPrimaryAlias } from './utils.mjs';\n\n/**\n * This file contains helpers that generate default formFields for each screen\n */\nconst DEFAULT_COUNTRY_CODE = '+1';\n/** Helper function that gets the default formField for given field name */\nconst getDefaultFormField = fieldName => {\n  let options = defaultFormFieldOptions[fieldName];\n  const {\n    type\n  } = options;\n  if (type === 'tel') {\n    options = {\n      ...options,\n      dialCode: DEFAULT_COUNTRY_CODE\n    };\n  }\n  return options;\n};\n// Helper function that returns default form field for configured primary alias\nconst getAliasDefaultFormField = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  return {\n    ...getDefaultFormField(primaryAlias),\n    autocomplete: 'username'\n  };\n};\n/** Reusable confirmation code form fields. */\nconst getConfirmationCodeFormFields = state => ({\n  confirmation_code: {\n    ...getDefaultFormField('confirmation_code'),\n    label: 'Code *',\n    placeholder: 'Code'\n  }\n});\nconst getSignInFormFields = state => ({\n  username: {\n    ...getAliasDefaultFormField(state)\n  },\n  password: {\n    ...getDefaultFormField('password'),\n    autocomplete: 'current-password'\n  }\n});\nconst getSignUpFormFields = state => {\n  const {\n    loginMechanisms,\n    signUpAttributes\n  } = state.context.config;\n  const primaryAlias = getPrimaryAlias(state);\n  /**\n   * @migration signUp Fields created here\n   */\n  const fieldNames = Array.from(new Set([...loginMechanisms, 'password', 'confirm_password', ...signUpAttributes]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      const fieldAttrs = fieldName === primaryAlias ? getAliasDefaultFormField(state) : getDefaultFormField(fieldName);\n      formField[fieldName] = {\n        ...fieldAttrs\n      };\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize SignUp FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\nconst getConfirmSignUpFormFields = state => ({\n  confirmation_code: {\n    ...getDefaultFormField('confirmation_code'),\n    placeholder: 'Enter your code'\n  }\n});\nconst getForgotPasswordFormFields = state => {\n  const primaryAlias = getPrimaryAlias(state);\n  const {\n    label\n  } = defaultFormFieldOptions[primaryAlias];\n  return {\n    username: {\n      ...getAliasDefaultFormField(state),\n      label: `Enter your ${label.toLowerCase()}`,\n      placeholder: `Enter your ${label.toLowerCase()}`\n    }\n  };\n};\nconst getConfirmResetPasswordFormFields = state => ({\n  ...getConfirmationCodeFormFields(),\n  password: {\n    ...getDefaultFormField('password'),\n    label: 'New Password',\n    placeholder: 'New Password'\n  },\n  confirm_password: {\n    ...getDefaultFormField('confirm_password'),\n    label: 'Confirm Password',\n    placeholder: 'Confirm Password'\n  }\n});\nconst getForceNewPasswordFormFields = state => {\n  const actorState = getActorState(state);\n  const {\n    missingAttributes\n  } = actorState.context;\n  const fieldNames = Array.from(new Set(['password', 'confirm_password', ...(missingAttributes ?? [])]));\n  const formField = {};\n  for (const fieldName of fieldNames) {\n    if (isAuthFieldWithDefaults(fieldName)) {\n      formField[fieldName] = {\n        ...getDefaultFormField(fieldName)\n      };\n    } else {\n      // There's a `custom:*` attribute or one we don't already have an implementation for\n      console.debug(`Authenticator does not have a default implementation for ${fieldName}. Customize ForceNewPassword FormFields to add your own.`);\n    }\n  }\n  return formField;\n};\n/** Collect all the defaultFormFields getters */\nconst defaultFormFieldsGetters = {\n  signIn: getSignInFormFields,\n  signUp: getSignUpFormFields,\n  confirmSignUp: getConfirmSignUpFormFields,\n  confirmSignIn: getConfirmationCodeFormFields,\n  forceNewPassword: getForceNewPasswordFormFields,\n  forgotPassword: getForgotPasswordFormFields,\n  confirmResetPassword: getConfirmResetPasswordFormFields,\n  confirmVerifyUser: getConfirmationCodeFormFields,\n  setupTotp: getConfirmationCodeFormFields\n};\nexport { DEFAULT_COUNTRY_CODE, defaultFormFieldsGetters, getAliasDefaultFormField };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}