{"ast":null,"code":"const SIGN_IN_STEP_MFA_CONFIRMATION = ['CONFIRM_SIGN_IN_WITH_SMS_CODE', 'CONFIRM_SIGN_IN_WITH_TOTP_CODE'];\n// response next step guards\nconst shouldConfirmSignInWithNewPassword = (_, {\n  data\n}) => data?.nextStep.signInStep === 'CONFIRM_SIGN_IN_WITH_NEW_PASSWORD_REQUIRED';\nconst shouldResetPasswordFromSignIn = (_, {\n  data\n}) => data?.nextStep?.signInStep === 'RESET_PASSWORD';\nconst shouldConfirmSignUpFromSignIn = (_, {\n  data\n}) => data?.nextStep.signInStep === 'CONFIRM_SIGN_UP';\nconst shouldAutoSignIn = (_, {\n  data\n}) => data?.nextStep.signUpStep === 'COMPLETE_AUTO_SIGN_IN';\nconst hasCompletedSignIn = (_, {\n  data\n}) => data?.nextStep.signInStep === 'DONE';\nconst hasCompletedSignUp = (_, {\n  data\n}) => data?.nextStep.signUpStep === 'DONE';\nconst hasCompletedResetPassword = (_, {\n  data\n}) => data?.nextStep.resetPasswordStep === 'DONE';\n// actor done guards read `step` from actor exit event\nconst hasCompletedAttributeConfirmation = (_, {\n  data\n}) => data?.step === 'CONFIRM_ATTRIBUTE_COMPLETE';\nconst isConfirmUserAttributeStep = (_, {\n  data\n}) => data?.step === 'CONFIRM_ATTRIBUTE_WITH_CODE';\nconst isShouldConfirmUserAttributeStep = (_, {\n  data\n}) => data?.step === 'SHOULD_CONFIRM_USER_ATTRIBUTE';\nconst isResetPasswordStep = (_, {\n  data\n}) => data?.step === 'RESET_PASSWORD';\nconst isConfirmSignUpStep = (_, {\n  data\n}) => data?.step === 'CONFIRM_SIGN_UP';\n// actor entry guards read `step` from actor context\nconst shouldConfirmSignIn = ({\n  step\n}) => SIGN_IN_STEP_MFA_CONFIRMATION.includes(step);\nconst shouldSetupTotp = ({\n  step\n}) => step === 'CONTINUE_SIGN_IN_WITH_TOTP_SETUP';\nconst shouldResetPassword = ({\n  step\n}) => step === 'RESET_PASSWORD';\nconst shouldConfirmResetPassword = ({\n  step\n}) => step === 'CONFIRM_RESET_PASSWORD_WITH_CODE';\nconst shouldConfirmSignUp = ({\n  step\n}) => step === 'CONFIRM_SIGN_UP';\n// miscellaneous guards\nconst shouldVerifyAttribute = (_, {\n  data\n}) => {\n  const {\n    phone_number_verified,\n    email_verified\n  } = data;\n  // email/phone_verified is returned as a string\n  const emailNotVerified = email_verified === undefined || email_verified === 'false';\n  const phoneNotVerified = phone_number_verified === undefined || phone_number_verified === 'false';\n  // only request verification if both email and phone are not verified\n  return emailNotVerified && phoneNotVerified;\n};\n/**\n * This guard covers an edge case that exists in the current state of the UI.\n * As of now, our ConfirmSignUp screen only supports showing an input for a\n * confirmation code. However, a Cognito UserPool can instead verify users\n * through a link that gets emailed to them. If a user verifies through the\n * link and then they click on the \"Resend Code\" button, they will get an error\n * saying that the user has already been confirmed. If we encounter that error,\n * we want to just funnel them through the rest of the flow. In the future, we will\n * want to update our UI to support both confirmation codes and links.\n *\n * https://github.com/aws-amplify/amplify-ui/issues/219\n */\nconst isUserAlreadyConfirmed = (_, {\n  data\n}) => data.message === 'User is already confirmed.';\nconst GUARDS = {\n  hasCompletedAttributeConfirmation,\n  hasCompletedResetPassword,\n  hasCompletedSignIn,\n  hasCompletedSignUp,\n  isConfirmSignUpStep,\n  isConfirmUserAttributeStep,\n  isResetPasswordStep,\n  isShouldConfirmUserAttributeStep,\n  isUserAlreadyConfirmed,\n  shouldAutoSignIn,\n  shouldConfirmResetPassword,\n  shouldConfirmSignIn,\n  shouldConfirmSignInWithNewPassword,\n  shouldConfirmSignUp,\n  shouldConfirmSignUpFromSignIn,\n  shouldResetPassword,\n  shouldResetPasswordFromSignIn,\n  shouldSetupTotp,\n  shouldVerifyAttribute\n};\nexport { GUARDS as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}