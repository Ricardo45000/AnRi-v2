{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\nimport '../utils/getClientInfo/getClientInfo.mjs';\nimport { isBrowser } from '../utils/isBrowser.mjs';\nimport '../utils/retry/retry.mjs';\nimport { AmplifyError } from '../errors/AmplifyError.mjs';\nimport '../types/errors.mjs';\nimport '../errors/errorHelpers.mjs';\nimport 'uuid';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../awsClients/pinpoint/base.mjs';\nimport '../awsClients/pinpoint/errorHelpers.mjs';\nimport '../Cache/index.mjs';\nimport { record } from '../providers/pinpoint/apis/record.mjs';\nimport '../providers/pinpoint/utils/PinpointEventBuffer.mjs';\nimport '../providers/pinpoint/types/errors.mjs';\nimport { Amplify } from '../singleton/Amplify.mjs';\nimport { fetchAuthSession } from '../singleton/apis/fetchAuthSession.mjs';\nimport { assert, ServiceWorkerErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Provides a means to registering a service worker in the browser\n * and communicating with it via postMessage events.\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API/\n *\n * postMessage events are currently not supported in all browsers. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API\n *\n * At the minmum this class will register the service worker and listen\n * and attempt to dispatch messages on state change and record analytics\n * events based on the service worker lifecycle.\n */\nclass ServiceWorkerClass {\n  constructor() {\n    // The AWS Amplify logger\n    this._logger = new ConsoleLogger('ServiceWorker');\n  }\n  /**\n   * Get the currently active service worker\n   */\n  get serviceWorker() {\n    assert(this._serviceWorker !== undefined, ServiceWorkerErrorCode.UndefinedInstance);\n    return this._serviceWorker;\n  }\n  /**\n   * Register the service-worker.js file in the browser\n   * Make sure the service-worker.js is part of the build\n   * for example with Angular, modify the angular-cli.json file\n   * and add to \"assets\" array \"service-worker.js\"\n   * @param {string} filePath Service worker file. Defaults to \"/service-worker.js\"\n   * @param {string} scope The service worker scope. Defaults to \"/\"\n   *  - API Doc: https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register\n   * @returns {Promise}\n   *\t- resolve(ServiceWorkerRegistration)\n   *\t- reject(Error)\n   **/\n  register(filePath = '/service-worker.js', scope = '/') {\n    this._logger.debug(`registering ${filePath}`);\n    this._logger.debug(`registering service worker with scope ${scope}`);\n    return new Promise((resolve, reject) => {\n      if (navigator && 'serviceWorker' in navigator) {\n        navigator.serviceWorker.register(filePath, {\n          scope\n        }).then(registration => {\n          if (registration.installing) {\n            this._serviceWorker = registration.installing;\n          } else if (registration.waiting) {\n            this._serviceWorker = registration.waiting;\n          } else if (registration.active) {\n            this._serviceWorker = registration.active;\n          }\n          this._registration = registration;\n          this._setupListeners();\n          this._logger.debug(`Service Worker Registration Success: ${registration}`);\n          resolve(registration);\n        }).catch(error => {\n          this._logger.debug(`Service Worker Registration Failed ${error}`);\n          reject(new AmplifyError({\n            name: ServiceWorkerErrorCode.Unavailable,\n            message: 'Service Worker not available',\n            underlyingError: error\n          }));\n        });\n      } else {\n        reject(new AmplifyError({\n          name: ServiceWorkerErrorCode.Unavailable,\n          message: 'Service Worker not available'\n        }));\n      }\n    });\n  }\n  /**\n   * Enable web push notifications. If not subscribed, a new subscription will\n   * be created and registered.\n   * \tTest Push Server: https://web-push-codelab.glitch.me/\n   * \tPush Server Libraries: https://github.com/web-push-libs/\n   * \tAPI Doc: https://developers.google.com/web/fundamentals/codelabs/push-notifications/\n   * @param publicKey\n   * @returns {Promise}\n   * \t- resolve(PushSubscription)\n   *  - reject(Error)\n   */\n  enablePush(publicKey) {\n    assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n    this._publicKey = publicKey;\n    return new Promise((resolve, reject) => {\n      if (isBrowser()) {\n        assert(this._registration !== undefined, ServiceWorkerErrorCode.UndefinedRegistration);\n        this._registration.pushManager.getSubscription().then(subscription => {\n          if (subscription) {\n            this._subscription = subscription;\n            this._logger.debug(`User is subscribed to push: ${JSON.stringify(subscription)}`);\n            resolve(subscription);\n          } else {\n            this._logger.debug(`User is NOT subscribed to push`);\n            return this._registration.pushManager.subscribe({\n              userVisibleOnly: true,\n              applicationServerKey: this._urlB64ToUint8Array(publicKey)\n            }).then(pushManagerSubscription => {\n              this._subscription = pushManagerSubscription;\n              this._logger.debug(`User subscribed: ${JSON.stringify(pushManagerSubscription)}`);\n              resolve(pushManagerSubscription);\n            }).catch(error => {\n              this._logger.error(error);\n            });\n          }\n        });\n      } else {\n        reject(new AmplifyError({\n          name: ServiceWorkerErrorCode.Unavailable,\n          message: 'Service Worker not available'\n        }));\n      }\n    });\n  }\n  /**\n   * Convert a base64 encoded string to a Uint8 array for the push server key\n   * @param base64String\n   */\n  _urlB64ToUint8Array(base64String) {\n    const padding = '='.repeat((4 - base64String.length % 4) % 4);\n    const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n    const rawData = window.atob(base64);\n    const outputArray = new Uint8Array(rawData.length);\n    for (let i = 0; i < rawData.length; ++i) {\n      outputArray[i] = rawData.charCodeAt(i);\n    }\n    return outputArray;\n  }\n  /**\n   * Send a message to the service worker. The service worker needs\n   * to implement `self.addEventListener('message') to handle the\n   * message. This ***currently*** does not work in Safari or IE.\n   * @param {object | string} message An arbitrary JSON object or string message to send to the service worker\n   *\t- see: https://developer.mozilla.org/en-US/docs/Web/API/Transferable\n   * @returns {Promise}\n   **/\n  send(message) {\n    if (this._serviceWorker) {\n      this._serviceWorker.postMessage(typeof message === 'object' ? JSON.stringify(message) : message);\n    }\n  }\n  /**\n   * Listen for service worker state change and message events\n   * https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorker/state\n   **/\n  _setupListeners() {\n    var _this = this;\n    this.serviceWorker.addEventListener('statechange', /*#__PURE__*/_asyncToGenerator(function* () {\n      const currentState = _this.serviceWorker.state;\n      _this._logger.debug(`ServiceWorker statechange: ${currentState}`);\n      const {\n        appId,\n        region,\n        bufferSize,\n        flushInterval,\n        flushSize,\n        resendLimit\n      } = Amplify.getConfig().Analytics?.Pinpoint ?? {};\n      const {\n        credentials\n      } = yield fetchAuthSession();\n      if (appId && region && credentials) {\n        // Pinpoint is configured, record an event\n        record({\n          appId,\n          region,\n          category: 'Core',\n          credentials,\n          bufferSize,\n          flushInterval,\n          flushSize,\n          resendLimit,\n          event: {\n            name: 'ServiceWorker',\n            attributes: {\n              state: currentState\n            }\n          }\n        });\n      }\n    }));\n    this.serviceWorker.addEventListener('message', event => {\n      this._logger.debug(`ServiceWorker message event: ${event}`);\n    });\n  }\n}\nexport { ServiceWorkerClass };\n//# sourceMappingURL=ServiceWorker.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}