{"ast":null,"code":"import { createMachine, forwardTo, assign, spawn, actions } from 'xstate';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport { isEmptyObject } from '../../utils/utils.mjs';\nimport ACTIONS from './actions.mjs';\nimport GUARDS from './guards.mjs';\nimport { forgotPasswordActor } from './actors/forgotPassword.mjs';\nimport { signInActor } from './actors/signIn.mjs';\nimport { signUpActor } from './actors/signUp.mjs';\nimport { signOutActor } from './actors/signOut.mjs';\nimport { verifyUserAttributesActor } from './actors/verifyUserAttributes.mjs';\nimport { defaultServices } from './defaultServices.mjs';\nconst getActorContext = (context, defaultStep) => ({\n  ...context.actorDoneData,\n  step: context?.actorDoneData?.step ?? defaultStep,\n  // initialize empty objects on actor start\n  formValues: {},\n  touched: {},\n  validationError: {},\n  // values included on `context.config` that should be available in actors\n  formFields: context.config?.formFields,\n  loginMechanisms: context.config?.loginMechanisms,\n  passwordSettings: context.config?.passwordSettings,\n  signUpAttributes: context.config?.signUpAttributes,\n  socialProviders: context.config?.socialProviders\n});\nconst {\n  choose,\n  stop\n} = actions;\nconst stopActor = machineId => stop(machineId);\n// setup step waits for ui to emit INIT action to proceed to configure\nconst LEGACY_WAIT_CONFIG = {\n  on: {\n    INIT: {\n      actions: 'configure',\n      target: 'getConfig'\n    },\n    SIGN_OUT: '#authenticator.signOut'\n  }\n};\n// setup step proceeds directly to configure\nconst NEXT_WAIT_CONFIG = {\n  always: {\n    actions: 'configure',\n    target: 'getConfig'\n  }\n};\nfunction createAuthenticatorMachine(options) {\n  const {\n    useNextWaitConfig,\n    ...overrideConfigServices\n  } = options ?? {};\n  const initConfig = useNextWaitConfig ? NEXT_WAIT_CONFIG : LEGACY_WAIT_CONFIG;\n  return createMachine({\n    id: 'authenticator',\n    initial: 'idle',\n    context: {\n      user: undefined,\n      config: {},\n      services: defaultServices,\n      actorRef: undefined,\n      hasSetup: false\n    },\n    predictableActionArguments: true,\n    states: {\n      // See: https://xstate.js.org/docs/guides/communication.html#invoking-promises\n      idle: {\n        invoke: {\n          src: 'handleGetCurrentUser',\n          onDone: {\n            actions: 'setUser',\n            target: 'setup'\n          },\n          onError: {\n            target: 'setup'\n          }\n        }\n      },\n      setup: {\n        initial: 'initConfig',\n        states: {\n          initConfig,\n          getConfig: {\n            invoke: {\n              src: 'getAmplifyConfig',\n              onDone: [{\n                actions: ['applyAmplifyConfig', 'setHasSetup'],\n                cond: 'hasUser',\n                target: '#authenticator.authenticated'\n              }, {\n                actions: ['applyAmplifyConfig', 'setHasSetup'],\n                target: 'goToInitialState'\n              }]\n            }\n          },\n          goToInitialState: {\n            always: [{\n              cond: 'isInitialStateSignUp',\n              target: '#authenticator.signUpActor'\n            }, {\n              cond: 'isInitialStateResetPassword',\n              target: '#authenticator.forgotPasswordActor'\n            }, {\n              target: '#authenticator.signInActor'\n            }]\n          }\n        }\n      },\n      getCurrentUser: {\n        invoke: {\n          src: 'handleGetCurrentUser',\n          onDone: {\n            actions: 'setUser',\n            target: '#authenticator.authenticated'\n          },\n          onError: {\n            target: '#authenticator.setup'\n          }\n        }\n      },\n      signInActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignInActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signInActor')\n          }\n        },\n        on: {\n          FORGOT_PASSWORD: 'forgotPasswordActor',\n          SIGN_IN: 'signInActor',\n          SIGN_UP: 'signUpActor',\n          'done.invoke.signInActor': [{\n            cond: 'hasCompletedAttributeConfirmation',\n            target: '#authenticator.getCurrentUser'\n          }, {\n            cond: 'isShouldConfirmUserAttributeStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            cond: 'isResetPasswordStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.forgotPasswordActor'\n          }, {\n            cond: 'isConfirmSignUpStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.signUpActor'\n          }]\n        }\n      },\n      signUpActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignUpActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signUpActor')\n          }\n        },\n        on: {\n          SIGN_IN: 'signInActor',\n          'done.invoke.signUpActor': [{\n            cond: 'hasCompletedAttributeConfirmation',\n            target: '#authenticator.getCurrentUser'\n          }, {\n            cond: 'isShouldConfirmUserAttributeStep',\n            actions: 'setActorDoneData',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            cond: 'isConfirmUserAttributeStep',\n            target: '#authenticator.verifyUserAttributesActor'\n          }, {\n            actions: 'setActorDoneData',\n            target: '#authenticator.signInActor'\n          }]\n        }\n      },\n      forgotPasswordActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnForgotPasswordActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('forgotPasswordActor')\n          }\n        },\n        on: {\n          SIGN_IN: 'signInActor',\n          'done.invoke.forgotPasswordActor': [{\n            target: '#authenticator.signInActor'\n          }]\n        }\n      },\n      verifyUserAttributesActor: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnVerifyUserAttributesActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('verifyUserAttributesActor')\n          }\n        },\n        on: {\n          'done.invoke.verifyUserAttributesActor': [{\n            actions: 'setActorDoneData',\n            target: '#authenticator.getCurrentUser'\n          }]\n        }\n      },\n      authenticated: {\n        initial: 'idle',\n        states: {\n          idle: {\n            on: {\n              TOKEN_REFRESH: 'refreshUser'\n            }\n          },\n          refreshUser: {\n            invoke: {\n              src: '#authenticator.getCurrentUser',\n              onDone: {\n                actions: 'setUser',\n                target: 'idle'\n              },\n              onError: {\n                target: '#authenticator.signOut'\n              }\n            }\n          }\n        },\n        on: {\n          SIGN_OUT: 'signOut'\n        }\n      },\n      signOut: {\n        initial: 'spawnActor',\n        states: {\n          spawnActor: {\n            always: {\n              actions: 'spawnSignOutActor',\n              target: 'runActor'\n            }\n          },\n          runActor: {\n            entry: 'clearActorDoneData',\n            exit: stopActor('signOutActor')\n          }\n        },\n        on: {\n          'done.invoke.signOutActor': {\n            actions: 'clearUser',\n            target: 'setup.getConfig'\n          }\n        }\n      }\n    },\n    on: {\n      SIGN_IN_WITH_REDIRECT: {\n        target: '#authenticator.getCurrentUser'\n      },\n      CHANGE: {\n        actions: 'forwardToActor'\n      },\n      BLUR: {\n        actions: 'forwardToActor'\n      },\n      SUBMIT: {\n        actions: 'forwardToActor'\n      },\n      FEDERATED_SIGN_IN: {\n        actions: 'forwardToActor'\n      },\n      RESEND: {\n        actions: 'forwardToActor'\n      },\n      SIGN_IN: {\n        actions: 'forwardToActor'\n      },\n      SKIP: {\n        actions: 'forwardToActor'\n      }\n    }\n  }, {\n    actions: {\n      ...ACTIONS,\n      forwardToActor: choose([{\n        cond: 'hasActor',\n        actions: forwardTo(({\n          actorRef\n        }) => actorRef)\n      }]),\n      setActorDoneData: assign({\n        actorDoneData: (context, event) => ({\n          challengeName: event.data.challengeName,\n          codeDeliveryDetails: event.data.codeDeliveryDetails,\n          missingAttributes: event.data.missingAttributes,\n          remoteError: event.data.remoteError,\n          username: event.data.username,\n          step: event.data.step,\n          totpSecretCode: event.data.totpSecretCode,\n          unverifiedUserAttributes: event.data.unverifiedUserAttributes\n        })\n      }),\n      applyAmplifyConfig: assign({\n        config(context, {\n          data: cliConfig\n        }) {\n          // Prefer explicitly configured settings over default CLI values\\\n          const {\n            loginMechanisms = cliConfig.loginMechanisms ?? [],\n            signUpAttributes = cliConfig.signUpAttributes ?? [],\n            socialProviders = cliConfig.socialProviders ?? [],\n            initialState,\n            formFields: _formFields,\n            passwordSettings = cliConfig.passwordFormat ?? {}\n          } = context.config;\n          // By default, Cognito assumes `username`, so there isn't a different username attribute like `email`.\n          // We explicitly add it as a login mechanism to be consistent with Admin UI's language.\n          if (loginMechanisms.length === 0) {\n            loginMechanisms.push('username');\n          }\n          const formFields = convertFormFields(_formFields) ?? {};\n          return {\n            formFields,\n            initialState,\n            loginMechanisms,\n            passwordSettings,\n            signUpAttributes,\n            socialProviders\n          };\n        }\n      }),\n      spawnSignInActor: assign({\n        actorRef: (context, _) => {\n          const {\n            services\n          } = context;\n          const actor = signInActor({\n            services\n          }).withContext(getActorContext(context, 'SIGN_IN'));\n          return spawn(actor, {\n            name: 'signInActor'\n          });\n        }\n      }),\n      spawnSignUpActor: assign({\n        actorRef: (context, _) => {\n          const {\n            services\n          } = context;\n          const actor = signUpActor({\n            services\n          }).withContext(getActorContext(context, 'SIGN_UP'));\n          return spawn(actor, {\n            name: 'signUpActor'\n          });\n        }\n      }),\n      spawnForgotPasswordActor: assign({\n        actorRef: (context, _) => {\n          const {\n            services\n          } = context;\n          const actor = forgotPasswordActor({\n            services\n          }).withContext(getActorContext(context, 'FORGOT_PASSWORD'));\n          return spawn(actor, {\n            name: 'forgotPasswordActor'\n          });\n        }\n      }),\n      spawnVerifyUserAttributesActor: assign({\n        actorRef: context => {\n          const actor = verifyUserAttributesActor().withContext(getActorContext(context));\n          return spawn(actor, {\n            name: 'verifyUserAttributesActor'\n          });\n        }\n      }),\n      spawnSignOutActor: assign({\n        actorRef: context => {\n          const actor = signOutActor().withContext({\n            user: context?.user\n          });\n          return spawn(actor, {\n            name: 'signOutActor'\n          });\n        }\n      }),\n      configure: assign((_, event) => {\n        const {\n          services: customServices,\n          ...config\n        } = !isEmptyObject(overrideConfigServices) ? overrideConfigServices : event.data ?? {};\n        return {\n          services: {\n            ...defaultServices,\n            ...customServices\n          },\n          config\n        };\n      }),\n      setHasSetup: assign({\n        hasSetup: true\n      })\n    },\n    guards: {\n      ...GUARDS,\n      hasActor: ({\n        actorRef\n      }) => !!actorRef,\n      isInitialStateSignUp: ({\n        config\n      }) => config.initialState === 'signUp',\n      isInitialStateResetPassword: ({\n        config\n      }) => config.initialState === 'forgotPassword',\n      shouldSetup: ({\n        hasSetup\n      }) => !hasSetup,\n      hasUser: ({\n        user\n      }) => {\n        return !!user;\n      }\n    },\n    services: {\n      getAmplifyConfig: ({\n        services\n      }) => services.getAmplifyConfig(),\n      handleGetCurrentUser: ({\n        services\n      }) => services.getCurrentUser()\n    }\n  });\n}\nfunction convertFormFields(formFields) {\n  if (formFields) {\n    Object.keys(formFields).forEach(component => {\n      Object.keys(formFields[component]).forEach(inputName => {\n        let ff = formFields[component][inputName];\n        ff.required = ff.isRequired;\n      });\n    });\n  }\n  return formFields;\n}\nexport { createAuthenticatorMachine };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}