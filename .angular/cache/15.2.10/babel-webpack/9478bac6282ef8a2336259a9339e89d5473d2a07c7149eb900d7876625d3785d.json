{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { amplifyUuid } from '../../../utils/amplifyUuid/index.mjs';\nimport { getClientInfo } from '../../../utils/getClientInfo/getClientInfo.mjs';\nimport '../../../utils/retry/retry.mjs';\nimport '@aws-crypto/sha256-js';\nimport '@smithy/util-hex-encoding';\nimport '../../../awsClients/pinpoint/base.mjs';\nimport '../../../awsClients/pinpoint/errorHelpers.mjs';\nimport { updateEndpoint as updateEndpoint$1 } from '../../../awsClients/pinpoint/updateEndpoint.mjs';\nimport { cacheEndpointId } from '../utils/cacheEndpointId.mjs';\nimport { getEndpointId } from '../utils/getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * @internal\n */\nconst updateEndpoint = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    address,\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    optOut,\n    region,\n    userAttributes,\n    userId,\n    userProfile,\n    userAgentValue\n  }) {\n    const endpointId = yield getEndpointId(appId, category);\n    // only generate a new endpoint id if one was not found in cache\n    const createdEndpointId = !endpointId ? amplifyUuid() : undefined;\n    const {\n      customProperties,\n      demographic,\n      email,\n      location,\n      metrics,\n      name,\n      plan\n    } = userProfile ?? {};\n    const clientInfo = getClientInfo();\n    const mergedDemographic = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform,\n      ...demographic\n    };\n    const shouldAddAttributes = email || customProperties || name || plan;\n    const attributes = {\n      ...(email && {\n        email: [email]\n      }),\n      ...(name && {\n        name: [name]\n      }),\n      ...(plan && {\n        plan: [plan]\n      }),\n      ...customProperties\n    };\n    const input = {\n      ApplicationId: appId,\n      EndpointId: endpointId ?? createdEndpointId,\n      EndpointRequest: {\n        RequestId: amplifyUuid(),\n        EffectiveDate: new Date().toISOString(),\n        ChannelType: channelType,\n        Address: address,\n        Attributes: shouldAddAttributes ? attributes : undefined,\n        Demographic: {\n          AppVersion: mergedDemographic.appVersion,\n          Locale: mergedDemographic.locale,\n          Make: mergedDemographic.make,\n          Model: mergedDemographic.model,\n          ModelVersion: mergedDemographic.modelVersion,\n          Platform: mergedDemographic.platform,\n          PlatformVersion: mergedDemographic.platformVersion,\n          Timezone: mergedDemographic.timezone\n        },\n        Location: {\n          City: location?.city,\n          Country: location?.country,\n          Latitude: location?.latitude,\n          Longitude: location?.longitude,\n          PostalCode: location?.postalCode,\n          Region: location?.region\n        },\n        Metrics: metrics,\n        OptOut: optOut,\n        User: {\n          UserId: userId ?? identityId,\n          UserAttributes: userAttributes\n        }\n      }\n    };\n    yield updateEndpoint$1({\n      credentials,\n      region,\n      userAgentValue\n    }, input);\n    // if we had to create an endpoint id, we need to now cache it\n    if (createdEndpointId) {\n      return cacheEndpointId(appId, category, createdEndpointId);\n    }\n  });\n  return function updateEndpoint(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { updateEndpoint };\n//# sourceMappingURL=updateEndpoint.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}