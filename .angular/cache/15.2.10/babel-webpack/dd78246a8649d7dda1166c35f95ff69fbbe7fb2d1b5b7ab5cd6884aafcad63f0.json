{"ast":null,"code":"import { Amplify } from 'aws-amplify';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { hasSpecialChars } from '../authenticator/utils.mjs';\n\n// gets password requirement from Amplify.configure data\nconst getPasswordRequirement = () => {\n  const config = Amplify.getConfig();\n  const passwordSettings = config?.Auth?.Cognito.passwordFormat;\n  if (!passwordSettings) {\n    return null;\n  }\n  return {\n    minLength: passwordSettings.minLength,\n    needsLowerCase: passwordSettings.requireLowercase ?? false,\n    needsUpperCase: passwordSettings.requireUppercase ?? false,\n    needsNumber: passwordSettings.requireNumbers ?? false,\n    needsSpecialChar: passwordSettings.requireSpecialCharacters ?? false\n  };\n};\nconst getHasMinLength = minLength => ({\n  validationMode: 'onTouched',\n  validator: field => field.length >= minLength,\n  message: `Password must have at least ${minLength} characters`\n});\nconst hasLowerCase = {\n  validationMode: 'onTouched',\n  validator: field => /[a-z]/.test(field),\n  message: 'Password must have lower case letters'\n};\nconst hasUpperCase = {\n  validationMode: 'onTouched',\n  validator: field => /[A-Z]/.test(field),\n  message: 'Password must have upper case letters'\n};\nconst hasNumber = {\n  validationMode: 'onTouched',\n  validator: field => /[0-9]/.test(field),\n  message: 'Password must have numbers'\n};\nconst hasSpecialChar = {\n  validationMode: 'onTouched',\n  validator: field => hasSpecialChars(field),\n  message: 'Password must have special characters'\n};\nconst getMatchesConfirmPassword = password => {\n  return {\n    validationMode: 'onTouched',\n    validator: confirmPassword => password === confirmPassword,\n    message: 'Your passwords must match'\n  };\n};\nconst getDefaultPasswordValidators = () => {\n  const requirement = getPasswordRequirement();\n  if (!requirement) return [];\n  const validators = [];\n  const {\n    minLength,\n    needsLowerCase,\n    needsUpperCase,\n    needsNumber,\n    needsSpecialChar\n  } = requirement;\n  if (minLength) {\n    validators.push(getHasMinLength(minLength));\n  }\n  if (needsLowerCase) {\n    validators.push(hasLowerCase);\n  }\n  if (needsUpperCase) {\n    validators.push(hasUpperCase);\n  }\n  if (needsNumber) {\n    validators.push(hasNumber);\n  }\n  if (needsSpecialChar) {\n    validators.push(hasSpecialChar);\n  }\n  return validators;\n};\nconst getDefaultConfirmPasswordValidators = password => {\n  return [getMatchesConfirmPassword(password)];\n};\n/*\n * `shouldValidate` determines whether validator should be run, based on validation mode,\n * input event type, and whether it has been blurred yet.\n */\nconst shouldValidate = ({\n  validationMode,\n  eventType,\n  hasBlurred\n}) => {\n  switch (validationMode) {\n    case 'onBlur':\n      {\n        // only run validator on blur event\n        return eventType === 'blur';\n      }\n    case 'onChange':\n      {\n        // only run validator on change event\n        return eventType === 'change';\n      }\n    case 'onTouched':\n      {\n        /**\n         * run validator on first blur event, and then every subsequent\n         * blur/change event.\n         */\n        return eventType === 'blur' || hasBlurred;\n      }\n  }\n};\n// `runFieldValidator` runs all validators, and returns error messages.\nconst runFieldValidators = ({\n  value,\n  validators,\n  eventType,\n  hasBlurred\n}) => {\n  if (!value) return [];\n  return validators.reduce((prevErrors, validatorSpec) => {\n    const {\n      validator,\n      validationMode,\n      message\n    } = validatorSpec;\n    if (shouldValidate({\n      validationMode,\n      eventType,\n      hasBlurred\n    })) {\n      const hasError = !validator(value);\n      return hasError ? [...prevErrors, message] : prevErrors;\n    }\n    return prevErrors;\n  }, []);\n};\nexport { getDefaultConfirmPasswordValidators, getDefaultPasswordValidators, getHasMinLength, getMatchesConfirmPassword, getPasswordRequirement, hasLowerCase, hasNumber, hasSpecialChar, hasUpperCase, runFieldValidators, shouldValidate };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}