{"ast":null,"code":"import { createMachine, sendUpdate } from 'xstate';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport GUARDS from '../guards.mjs';\nimport { defaultServices } from '../defaultServices.mjs';\nfunction forgotPasswordActor({\n  services\n}) {\n  return createMachine({\n    id: 'forgotPasswordActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          cond: 'shouldConfirmResetPassword',\n          target: 'confirmResetPassword'\n        }, {\n          target: 'forgotPassword'\n        }]\n      },\n      forgotPassword: {\n        initial: 'edit',\n        entry: 'sendUpdate',\n        exit: ['clearError', 'clearTouched'],\n        states: {\n          edit: {\n            entry: 'sendUpdate',\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              BLUR: {\n                actions: 'handleBlur'\n              }\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['sendUpdate', 'clearError', 'setUsernameForgotPassword'],\n            invoke: {\n              src: 'handleResetPassword',\n              onDone: {\n                actions: ['setCodeDeliveryDetails', 'setNextResetPasswordStep'],\n                target: '#forgotPasswordActor.confirmResetPassword'\n              },\n              onError: {\n                actions: 'setRemoteError',\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      confirmResetPassword: {\n        type: 'parallel',\n        exit: ['clearFormValues', 'clearError', 'clearTouched'],\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'valid',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'invalid',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              },\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              }\n            }\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: 'sendUpdate',\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  },\n                  RESEND: 'resendCode',\n                  CHANGE: {\n                    actions: 'handleInput'\n                  },\n                  BLUR: {\n                    actions: 'handleBlur'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateFields',\n                  onDone: {\n                    target: 'pending',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    target: 'idle',\n                    actions: 'setFieldErrors'\n                  }\n                }\n              },\n              resendCode: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleResetPassword',\n                  onDone: {\n                    target: 'idle'\n                  },\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              },\n              pending: {\n                tags: 'pending',\n                entry: ['clearError', 'sendUpdate'],\n                invoke: {\n                  src: 'handleConfirmResetPassword',\n                  onDone: [{\n                    cond: 'hasCompletedResetPassword',\n                    actions: 'setNextResetPasswordStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }, {\n                    actions: 'setSignInStep',\n                    target: '#forgotPasswordActor.resolved'\n                  }],\n                  onError: {\n                    actions: 'setRemoteError',\n                    target: 'idle'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: ({\n          step\n        }) => ({\n          step\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: {\n      ...ACTIONS,\n      sendUpdate: sendUpdate()\n    },\n    guards: GUARDS,\n    services: {\n      handleResetPassword({\n        username\n      }) {\n        return services.handleForgotPassword({\n          username\n        });\n      },\n      handleConfirmResetPassword({\n        formValues,\n        username\n      }) {\n        const {\n          confirmation_code: confirmationCode,\n          password: newPassword\n        } = formValues;\n        return services.handleForgotPasswordSubmit({\n          confirmationCode,\n          newPassword,\n          username\n        });\n      },\n      validateFields(context) {\n        return runValidators(context.formValues, context.touched, context.passwordSettings, [defaultServices.validateFormPassword, defaultServices.validateConfirmPassword]);\n      }\n    }\n  });\n}\nexport { forgotPasswordActor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}