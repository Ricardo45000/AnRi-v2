{"ast":null,"code":"import { isBrowser } from '../isBrowser.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst stateChangeListeners = new Set();\nclass SessionListener {\n  constructor() {\n    this.listenerActive = false;\n    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);\n    // Setup state listeners\n    if (isBrowser()) {\n      document.addEventListener('visibilitychange', this.handleVisibilityChange, false);\n      this.listenerActive = true;\n    }\n  }\n  addStateChangeListener(listener, notifyOnAdd = false) {\n    // No-op if document listener is not active\n    if (!this.listenerActive) {\n      return;\n    }\n    stateChangeListeners.add(listener);\n    // Notify new handlers of the current status on add\n    if (notifyOnAdd) {\n      listener(this.getSessionState());\n    }\n  }\n  removeStateChangeListener(handler) {\n    // No-op if document listener is not active\n    if (!this.listenerActive) {\n      return;\n    }\n    stateChangeListeners.delete(handler);\n  }\n  handleVisibilityChange() {\n    this.notifyHandlers();\n  }\n  notifyHandlers() {\n    const sessionState = this.getSessionState();\n    stateChangeListeners.forEach(listener => {\n      listener(sessionState);\n    });\n  }\n  getSessionState() {\n    if (isBrowser() && document.visibilityState !== 'hidden') {\n      return 'started';\n    }\n    // If, for any reason, document is undefined the session will never start\n    return 'ended';\n  }\n}\nexport { SessionListener };\n//# sourceMappingURL=SessionListener.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}