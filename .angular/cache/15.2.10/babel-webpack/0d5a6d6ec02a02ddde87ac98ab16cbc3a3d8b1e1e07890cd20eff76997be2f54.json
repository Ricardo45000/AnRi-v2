{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AmplifyErrorCode } from '../../../types/errors.mjs';\nimport { assert } from '../../../errors/errorHelpers.mjs';\nimport { updateEndpoint } from '../apis/updateEndpoint.mjs';\nimport { getEndpointId } from './getEndpointId.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resolves an endpoint id from cache or prepare via updateEndpoint if one does not already exist,\n * which will generate and cache an endpoint id between calls.\n *\n * @internal\n */\nconst resolveEndpointId = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    address,\n    appId,\n    category,\n    channelType,\n    credentials,\n    identityId,\n    region,\n    userAgentValue\n  }) {\n    let endpointId = yield getEndpointId(appId, category);\n    if (!endpointId) {\n      yield updateEndpoint({\n        address,\n        appId,\n        category,\n        channelType,\n        credentials,\n        identityId,\n        region,\n        userAgentValue\n      });\n      endpointId = yield getEndpointId(appId, category);\n    }\n    assert(!!endpointId, AmplifyErrorCode.NoEndpointId);\n    return endpointId;\n  });\n  return function resolveEndpointId(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { resolveEndpointId };\n//# sourceMappingURL=resolveEndpointId.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}