{"ast":null,"code":"import { getSignedHeaders } from './utils/getSignedHeaders.mjs';\nimport { getSigningValues } from './utils/getSigningValues.mjs';\nimport { HOST_HEADER, AMZ_DATE_HEADER, TOKEN_HEADER, AUTH_HEADER, SHA256_ALGORITHM_IDENTIFIER } from './constants.mjs';\nimport { getSignature } from './utils/getSignature.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Given a `HttpRequest`, returns a Signature Version 4 signed `HttpRequest`.\n *\n * @param request `HttpRequest` to be signed.\n * @param signRequestOptions `SignRequestOptions` object containing values used to construct the signature.\n * @returns A `HttpRequest` with authentication headers which can grant temporary access to AWS resources.\n */\nconst signRequest = (request, options) => {\n  const signingValues = getSigningValues(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const headers = {\n    ...request.headers\n  };\n  headers[HOST_HEADER] = request.url.host;\n  headers[AMZ_DATE_HEADER] = longDate;\n  if (sessionToken) {\n    headers[TOKEN_HEADER] = sessionToken;\n  }\n  const requestToSign = {\n    ...request,\n    headers\n  };\n  // calculate and add the signature to the request\n  const signature = getSignature(requestToSign, signingValues);\n  const credentialEntry = `Credential=${accessKeyId}/${credentialScope}`;\n  const signedHeadersEntry = `SignedHeaders=${getSignedHeaders(headers)}`;\n  const signatureEntry = `Signature=${signature}`;\n  headers[AUTH_HEADER] = `${SHA256_ALGORITHM_IDENTIFIER} ${credentialEntry}, ${signedHeadersEntry}, ${signatureEntry}`;\n  return requestToSign;\n};\nexport { signRequest };\n//# sourceMappingURL=signRequest.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}