{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assertTokenProviderConfig, assertOAuthConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../../utils/getAuthUserAgentValue.mjs';\nimport '../refreshAuthTokens.mjs';\nimport '../../tokenProvider/errorHelpers.mjs';\nimport '@aws-amplify/core';\nimport { cognitoUserPoolsTokenProvider } from '../../tokenProvider/tokenProvider.mjs';\nimport { oAuthStore } from './oAuthStore.mjs';\nimport { completeOAuthFlow } from './completeOAuthFlow.mjs';\nimport { getRedirectUrl } from './getRedirectUrl.mjs';\nimport { handleFailure } from './handleFailure.mjs';\nimport { addInflightPromise } from './inflightPromise.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst attemptCompleteOAuthFlow = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (authConfig) {\n    try {\n      assertTokenProviderConfig(authConfig);\n      assertOAuthConfig(authConfig);\n      oAuthStore.setAuthConfig(authConfig);\n    } catch (_) {\n      // no-op\n      // This should not happen as Amplify singleton checks the oauth config key\n      // unless the oauth config object doesn't contain required properties\n      return;\n    }\n    // No inflight OAuth\n    if (!(yield oAuthStore.loadOAuthInFlight())) {\n      return;\n    }\n    // when there is valid oauth config and there is an inflight oauth flow, try\n    // to block async calls that require fetching tokens before the oauth flow completes\n    // e.g. getCurrentUser, fetchAuthSession etc.\n    const asyncGetSessionBlocker = new Promise((resolve, _reject) => {\n      addInflightPromise(resolve);\n    });\n    cognitoUserPoolsTokenProvider.setWaitForInflightOAuth(() => asyncGetSessionBlocker);\n    try {\n      const currentUrl = window.location.href;\n      const {\n        loginWith,\n        userPoolClientId\n      } = authConfig;\n      const {\n        domain,\n        redirectSignIn,\n        responseType\n      } = loginWith.oauth;\n      const redirectUri = getRedirectUrl(redirectSignIn);\n      yield completeOAuthFlow({\n        currentUrl,\n        clientId: userPoolClientId,\n        domain,\n        redirectUri,\n        responseType,\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect)\n      });\n    } catch (err) {\n      yield handleFailure(err);\n    }\n  });\n  return function attemptCompleteOAuthFlow(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { attemptCompleteOAuthFlow };\n//# sourceMappingURL=attemptCompleteOAuthFlow.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}