{"ast":null,"code":"import { ALLOWED_SPECIAL_CHARACTERS, emailRegex } from './constants.mjs';\n\n// replaces all characters in a string with '*', except for the first and last char\nconst censorAllButFirstAndLast = value => {\n  const split = value.trim().split('');\n  for (let i = 0; i < split.length; i++) {\n    if (i > 0 && i < split.length - 1) {\n      split[i] = '*';\n    }\n  }\n  return split.join('');\n};\n// censors all but the last four characters of a phone number\nconst censorPhoneNumber = val => {\n  if (val.length < 4) {\n    return val;\n  }\n  const split = val.split('');\n  for (let i = 0; i < split.length - 4; i++) {\n    split[i] = '*';\n  }\n  return split.join('');\n};\n// censors all but the first and last of the name of an email and keeps domain\nconst censorEmail = val => {\n  const splitEmail = val.split('@');\n  const censoredName = censorAllButFirstAndLast(splitEmail[0]);\n  return `${censoredName}@${splitEmail[1]}`;\n};\n// based on the ContactMethod type, returns a censored contact value\nconst censorContactMethod = (type, value) => {\n  return type === 'Phone Number' ? censorPhoneNumber(value) : censorEmail(value);\n};\nconst hasSpecialChars = password => ALLOWED_SPECIAL_CHARACTERS.some(char => password.includes(char));\nconst getTotpCodeURL = (issuer, username, secret) => encodeURI(`otpauth://totp/${issuer}:${username}?secret=${secret}&issuer=${issuer}`);\nfunction trimValues(values, ...ignored) {\n  return Object.entries(values).reduce((acc, [name, value]) => ({\n    ...acc,\n    [name]: ignored.includes(name) ? value : value?.trim()\n  }), {});\n}\nconst isValidEmail = value => {\n  if (!value) return false;\n  return emailRegex.test(value);\n};\nexport { censorAllButFirstAndLast, censorContactMethod, censorEmail, censorPhoneNumber, getTotpCodeURL, hasSpecialChars, isValidEmail, trimValues };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}