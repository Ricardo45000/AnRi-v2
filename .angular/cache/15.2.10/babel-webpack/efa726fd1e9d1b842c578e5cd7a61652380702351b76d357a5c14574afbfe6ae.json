{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { decodeJWT, AmplifyError } from '@aws-amplify/core/internals/utils';\nimport { tokenOrchestrator } from './tokenProvider.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nfunction cacheCognitoTokens(_x) {\n  return _cacheCognitoTokens.apply(this, arguments);\n}\nfunction _cacheCognitoTokens() {\n  _cacheCognitoTokens = _asyncToGenerator(function* (AuthenticationResult) {\n    if (AuthenticationResult.AccessToken) {\n      const accessToken = decodeJWT(AuthenticationResult.AccessToken);\n      const accessTokenIssuedAtInMillis = (accessToken.payload.iat || 0) * 1000;\n      const currentTime = new Date().getTime();\n      const clockDrift = accessTokenIssuedAtInMillis > 0 ? accessTokenIssuedAtInMillis - currentTime : 0;\n      let idToken;\n      let refreshToken;\n      let deviceMetadata;\n      if (AuthenticationResult.RefreshToken) {\n        refreshToken = AuthenticationResult.RefreshToken;\n      }\n      if (AuthenticationResult.IdToken) {\n        idToken = decodeJWT(AuthenticationResult.IdToken);\n      }\n      if (AuthenticationResult?.NewDeviceMetadata) {\n        deviceMetadata = AuthenticationResult.NewDeviceMetadata;\n      }\n      const tokens = {\n        accessToken,\n        idToken,\n        refreshToken,\n        clockDrift,\n        deviceMetadata,\n        username: AuthenticationResult.username\n      };\n      if (AuthenticationResult?.signInDetails) {\n        tokens.signInDetails = AuthenticationResult.signInDetails;\n      }\n      yield tokenOrchestrator.setTokens({\n        tokens\n      });\n    } else {\n      // This would be a service error\n      throw new AmplifyError({\n        message: 'Invalid tokens',\n        name: 'InvalidTokens',\n        recoverySuggestion: 'Check Cognito UserPool settings'\n      });\n    }\n  });\n  return _cacheCognitoTokens.apply(this, arguments);\n}\nexport { cacheCognitoTokens };\n//# sourceMappingURL=cacheTokens.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}