{"ast":null,"code":"import { Hub, AMPLIFY_SYMBOL } from '../Hub/index.mjs';\nimport { parseAWSExports } from '../parseAWSExports.mjs';\nimport '../utils/getClientInfo/getClientInfo.mjs';\nimport '../utils/retry/retry.mjs';\nimport { deepFreeze } from '../utils/deepFreeze.mjs';\nimport { AuthClass } from './Auth/index.mjs';\nimport { ADD_OAUTH_LISTENER } from './constants.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass AmplifyClass {\n  constructor() {\n    this.oAuthListener = undefined;\n    this.resourcesConfig = {};\n    this.libraryOptions = {};\n    this.Auth = new AuthClass();\n  }\n  /**\n   * Configures Amplify for use with your back-end resources.\n   *\n   * @remarks\n   * This API does not perform any merging of either `resourcesConfig` or `libraryOptions`. The most recently\n   * provided values will be used after configuration.\n   *\n   * @remarks\n   * `configure` can be used to specify additional library options where available for supported categories.\n   *\n   * @param resourceConfig - Back-end resource configuration. Typically provided via the `aws-exports.js` file.\n   * @param libraryOptions - Additional options for customizing the behavior of the library.\n   */\n  configure(resourcesConfig, libraryOptions) {\n    let resolvedResourceConfig;\n    if (Object.keys(resourcesConfig).some(key => key.startsWith('aws_'))) {\n      resolvedResourceConfig = parseAWSExports(resourcesConfig);\n    } else {\n      resolvedResourceConfig = resourcesConfig;\n    }\n    this.resourcesConfig = resolvedResourceConfig;\n    if (libraryOptions) {\n      this.libraryOptions = libraryOptions;\n    }\n    // Make resource config immutable\n    this.resourcesConfig = deepFreeze(this.resourcesConfig);\n    this.Auth.configure(this.resourcesConfig.Auth, this.libraryOptions.Auth);\n    Hub.dispatch('core', {\n      event: 'configure',\n      data: this.resourcesConfig\n    }, 'Configure', AMPLIFY_SYMBOL);\n    this.notifyOAuthListener();\n  }\n  /**\n   * Provides access to the current back-end resource configuration for the Library.\n   *\n   * @returns Returns the immutable back-end resource configuration.\n   */\n  getConfig() {\n    return this.resourcesConfig;\n  }\n  /** @internal */\n  [ADD_OAUTH_LISTENER](listener) {\n    if (this.resourcesConfig.Auth?.Cognito.loginWith?.oauth) {\n      // when Amplify has been configured with a valid OAuth config while adding the listener, run it directly\n      listener(this.resourcesConfig.Auth?.Cognito);\n    } else {\n      // otherwise register the listener and run it later when Amplify gets configured with a valid oauth config\n      this.oAuthListener = listener;\n    }\n  }\n  notifyOAuthListener() {\n    if (!this.resourcesConfig.Auth?.Cognito.loginWith?.oauth || !this.oAuthListener) {\n      return;\n    }\n    this.oAuthListener(this.resourcesConfig.Auth?.Cognito);\n    // the listener should only be notified once with a valid oauth config\n    this.oAuthListener = undefined;\n  }\n}\n/**\n * The `Amplify` utility is used to configure the library.\n *\n * @remarks\n * `Amplify` is responsible for orchestrating cross-category communication within the library.\n */\nconst Amplify = new AmplifyClass();\nexport { Amplify, AmplifyClass };\n//# sourceMappingURL=Amplify.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}