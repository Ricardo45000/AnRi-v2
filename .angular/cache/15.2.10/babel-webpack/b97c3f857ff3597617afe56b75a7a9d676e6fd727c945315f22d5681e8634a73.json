{"ast":null,"code":"import { translate, DefaultTexts } from '../../i18n/translations.mjs';\n\n/**\n * ConfirmSignIn\n */\nconst getChallengeText = challengeName => {\n  switch (challengeName) {\n    case 'SMS_MFA':\n      return translate(DefaultTexts.CONFIRM_SMS);\n    case 'SOFTWARE_TOKEN_MFA':\n      return translate(DefaultTexts.CONFIRM_TOTP);\n    default:\n      throw new Error(`${translate('Unexpected challengeName encountered in ConfirmSignIn:')} ${challengeName}`);\n  }\n};\n/**\n * ConfirmSignUp\n */\nconst getDeliveryMessageText = codeDeliveryDetails => {\n  const {\n    DeliveryMedium,\n    Destination\n  } = codeDeliveryDetails ?? {};\n  const isEmailMessage = DeliveryMedium === 'EMAIL';\n  const isTextMessage = DeliveryMedium === 'SMS';\n  const arrivalMessage = translate(DefaultTexts.CODE_ARRIVAL);\n  if (!(isEmailMessage || isTextMessage)) {\n    return `${translate(DefaultTexts.CODE_SENT)}. ${arrivalMessage}.`;\n  }\n  const instructionMessage = isEmailMessage ? translate(DefaultTexts.CODE_EMAILED) : translate(DefaultTexts.CODE_TEXTED);\n  return `${instructionMessage} ${Destination}. ${arrivalMessage}.`;\n};\nconst getDeliveryMethodText = codeDeliveryDetails => {\n  const {\n    DeliveryMedium\n  } = codeDeliveryDetails ?? {};\n  const isEmailMessage = DeliveryMedium === 'EMAIL';\n  const isTextMessage = DeliveryMedium === 'SMS';\n  if (!isEmailMessage && isTextMessage) {\n    return translate(DefaultTexts.WE_SENT_CODE);\n  }\n  return isEmailMessage ? translate(DefaultTexts.WE_EMAILED) : translate(DefaultTexts.WE_TEXTED);\n};\n/**\n * FederatedSignIn\n */\nconst providerNameMap = {\n  amazon: 'Amazon',\n  apple: 'Apple',\n  facebook: 'Facebook',\n  google: 'Google'\n};\nconst getSignInWithFederationText = (route, provider) => {\n  const isSignIn = route === 'signIn';\n  return translate(`Sign ${isSignIn ? 'In' : 'Up'} with ${providerNameMap[provider]}`);\n};\nconst authenticatorTextUtil = {\n  /** Shared */\n  getBackToSignInText: () => translate(DefaultTexts.BACK_SIGN_IN),\n  getChangePasswordText: () => translate(DefaultTexts.CHANGE_PASSWORD),\n  getChangingText: () => translate(DefaultTexts.CHANGING_PASSWORD),\n  getConfirmText: () => translate(DefaultTexts.CONFIRM),\n  getConfirmingText: () => translate(DefaultTexts.CONFIRMING),\n  getCopyText: () => translate(DefaultTexts.UPPERCASE_COPY),\n  getHidePasswordText: () => translate(DefaultTexts.HIDE_PASSWORD),\n  getLoadingText: () => translate(DefaultTexts.LOADING),\n  getOrText: () => translate(DefaultTexts.OR),\n  getResendCodeText: () => translate(DefaultTexts.RESEND_CODE),\n  getSendCodeText: () => translate(DefaultTexts.SEND_CODE),\n  getSendingText: () => translate(DefaultTexts.SENDING),\n  getShowPasswordText: () => translate(DefaultTexts.SHOW_PASSWORD),\n  getSubmitText: () => translate(DefaultTexts.SUBMIT),\n  getSubmittingText: () => translate(DefaultTexts.SUBMITTING),\n  /** SignInSignUpTabs */\n  getSignInTabText: () => translate(DefaultTexts.SIGN_IN_TAB),\n  getSignUpTabText: () => translate(DefaultTexts.CREATE_ACCOUNT),\n  /** SignIn */\n  getForgotPasswordText: shortVersion => translate(shortVersion ? DefaultTexts.FORGOT_PASSWORD : DefaultTexts.FORGOT_YOUR_PASSWORD),\n  getSigningInText: () => translate(DefaultTexts.SIGNING_IN_BUTTON),\n  getSignInText: () => translate(DefaultTexts.SIGN_IN_BUTTON),\n  /** SignUp */\n  getCreatingAccountText: () => translate(DefaultTexts.CREATING_ACCOUNT),\n  getCreateAccountText: () => translate(DefaultTexts.CREATE_ACCOUNT),\n  /** ConfirmSignUp */\n  getDeliveryMessageText,\n  getDeliveryMethodText,\n  /** ConfirmSignIn */\n  getChallengeText,\n  /** ForgotPassword */\n  getResetYourPasswordText: () => translate(DefaultTexts.RESET_PASSWORD),\n  /** SetupTotp */\n  getSetupTotpText: () => translate(DefaultTexts.SETUP_TOTP),\n  // TODO: add defaultText for below\n  getSetupTotpInstructionsText: () => translate('Copy and paste the secret key below into an authenticator app and then enter the code in the text field below.'),\n  // TODO: add defaultText for \"COPIED\"\n  getCopiedText: () => translate('COPIED'),\n  /** FederatedSignIn */\n  getSignInWithFederationText,\n  /** VerifyUser */\n  getSkipText: () => translate(DefaultTexts.SKIP),\n  getVerifyText: () => translate(DefaultTexts.VERIFY),\n  getVerifyContactText: () => translate(DefaultTexts.VERIFY_CONTACT),\n  getAccountRecoveryInfoText: () => translate(DefaultTexts.VERIFY_HEADING),\n  /** Validations */\n  // TODO: add defaultText\n  getInvalidEmailText: () => translate('Please enter a valid email'),\n  // TODO: add defaultText\n  getRequiredFieldText: () => translate('This field is required')\n}; // using `as const` so that keys are strongly typed\n\nexport { authenticatorTextUtil };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}