{"ast":null,"code":"import '../../../types/authenticator/user.mjs';\nimport { isAuthFieldsWithDefaults } from '../../../types/authenticator/attributes.mjs';\nimport { getActorContext } from '../actor.mjs';\nimport { defaultFormFieldOptions } from '../constants.mjs';\nimport { defaultFormFieldsGetters, getAliasDefaultFormField } from './defaults.mjs';\nimport { applyTranslation, sortFormFields } from './utils.mjs';\n\n// Gets the default formFields for given route\nconst getDefaultFormFields = (route, state) => {\n  const formFieldGetter = defaultFormFieldsGetters[route];\n  return formFieldGetter(state);\n};\n// Gets custom formFields, and applies default values\nconst getCustomFormFields = (route, state) => {\n  const customFormFields = getActorContext(state)?.formFields?.[route];\n  if (!customFormFields || Object.keys(customFormFields).length === 0) {\n    return {};\n  }\n  return Object.entries(customFormFields).reduce((acc, [fieldName, customOptions]) => {\n    if ((route === 'signIn' || route === 'forgotPassword') && fieldName === 'username') {\n      // Unlike other screens, `signIn` and `forgotPassword` screens default login\n      // alias field names to \"username\", even if it's a phone number or email.\n      // In this case, we get the default formFieldOptions based on loginMechanism.\n      const defaultOptions = getAliasDefaultFormField(state);\n      // apply default to fill any gaps that are not present in customOptions\n      const mergedOptions = {\n        ...defaultOptions,\n        ...customOptions\n      };\n      return {\n        ...acc,\n        [fieldName]: mergedOptions\n      };\n    } else if (isAuthFieldsWithDefaults(fieldName)) {\n      // if this field is a known auth attribute that we have defaults for,\n      // apply defaults to customOptions.\n      const defaultOptions = defaultFormFieldOptions[fieldName];\n      const mergedOptions = {\n        ...defaultOptions,\n        ...customOptions\n      };\n      return {\n        ...acc,\n        [fieldName]: mergedOptions\n      };\n    } else {\n      // if this is not a known field, use customOptions as is.\n      return {\n        ...acc,\n        [fieldName]: customOptions\n      };\n    }\n  }, {});\n};\nconst getFormFields = (route, state) => {\n  const defaultFormFields = getDefaultFormFields(route, state);\n  const customFormFields = getCustomFormFields(route, state);\n  const formFields = {\n    ...defaultFormFields,\n    ...customFormFields\n  };\n  delete formFields['QR'];\n  return applyTranslation(formFields);\n};\nconst removeOrderKeys = formFields => formFields.map(field => {\n  const key = field[0];\n  // Drop order key to prevent passing to form field UI components\n  const values = {\n    ...field[1],\n    order: undefined\n  };\n  return [key, values];\n});\n/** Calls `getFormFields` above, then sorts it into an indexed array */\nconst getSortedFormFields = (route, state) => {\n  const formFields = getFormFields(route, state);\n  return removeOrderKeys(sortFormFields(formFields));\n};\nexport { getCustomFormFields, getDefaultFormFields, getFormFields, getSortedFormFields, removeOrderKeys };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}