{"ast":null,"code":"import { Sha256 } from '@aws-crypto/sha256-js';\nimport { getCrypto, base64Encoder } from '@aws-amplify/core/internals/utils';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst CODE_VERIFIER_CHARSET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n/**\n *\n * @param length Desired length of the code verifier.\n *\n * **NOTE:** According to the [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.1)\n * A code verifier must be with a length >= 43 and <= 128.\n *\n * @returns An object that contains the generated `codeVerifier` and a method\n * `toCodeChallenge` to generate the code challenge from the `codeVerifier`\n * following the spec of [RFC 7636](https://datatracker.ietf.org/doc/html/rfc7636#section-4.2).\n */\nconst generateCodeVerifier = length => {\n  const randomBytes = new Uint8Array(length);\n  getCrypto().getRandomValues(randomBytes);\n  let value = '';\n  let codeChallenge;\n  for (const byte of randomBytes) {\n    value += CODE_VERIFIER_CHARSET.charAt(byte % CODE_VERIFIER_CHARSET.length);\n  }\n  return {\n    value,\n    method: 'S256',\n    toCodeChallenge() {\n      if (codeChallenge) {\n        return codeChallenge;\n      }\n      codeChallenge = generateCodeChallenge(value);\n      return codeChallenge;\n    }\n  };\n};\nfunction generateCodeChallenge(codeVerifier) {\n  const awsCryptoHash = new Sha256();\n  awsCryptoHash.update(codeVerifier);\n  const codeChallenge = removePaddingChar(base64Encoder.convert(awsCryptoHash.digestSync(), {\n    urlSafe: true\n  }));\n  return codeChallenge;\n}\nfunction removePaddingChar(base64Encoded) {\n  return base64Encoded.replace(/=/g, '');\n}\nexport { generateCodeVerifier };\n//# sourceMappingURL=generateCodeVerifier.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}