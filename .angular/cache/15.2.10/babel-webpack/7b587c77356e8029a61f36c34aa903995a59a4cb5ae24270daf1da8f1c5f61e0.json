{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\nimport { KeyValueStorage } from '../storage/KeyValueStorage.mjs';\nimport { getLocalStorageWithFallback } from '../storage/utils.mjs';\nimport { defaultConfig } from './constants.mjs';\nimport { StorageCacheCommon } from './StorageCacheCommon.mjs';\nimport { getCurrentSizeKey, getCurrentTime } from './utils/cacheHelpers.mjs';\nimport './utils/errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('StorageCache');\n/**\n * Customized storage based on the SessionStorage or LocalStorage with LRU implemented\n */\nclass StorageCache extends StorageCacheCommon {\n  /**\n   * initialize the cache\n   * @param config - the configuration of the cache\n   */\n  constructor(config) {\n    const storage = getLocalStorageWithFallback();\n    super({\n      config,\n      keyValueStorage: new KeyValueStorage(storage)\n    });\n    this.storage = storage;\n    this.getItem = this.getItem.bind(this);\n    this.setItem = this.setItem.bind(this);\n    this.removeItem = this.removeItem.bind(this);\n  }\n  getAllCacheKeys(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const {\n        omitSizeKey\n      } = options ?? {};\n      const keys = [];\n      for (let i = 0; i < _this.storage.length; i++) {\n        const key = _this.storage.key(i);\n        if (omitSizeKey && key === getCurrentSizeKey(_this.config.keyPrefix)) {\n          continue;\n        }\n        if (key?.startsWith(_this.config.keyPrefix)) {\n          keys.push(key.substring(_this.config.keyPrefix.length));\n        }\n      }\n      return keys;\n    })();\n  }\n  /**\n   * Return a new instance of cache with customized configuration.\n   * @param {Object} config - the customized configuration\n   * @return {Object} - the new instance of Cache\n   */\n  createInstance(config) {\n    if (!config.keyPrefix || config.keyPrefix === defaultConfig.keyPrefix) {\n      logger.error('invalid keyPrefix, setting keyPrefix with timeStamp');\n      config.keyPrefix = getCurrentTime.toString();\n    }\n    return new StorageCache(config);\n  }\n}\nexport { StorageCache };\n//# sourceMappingURL=StorageCache.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}