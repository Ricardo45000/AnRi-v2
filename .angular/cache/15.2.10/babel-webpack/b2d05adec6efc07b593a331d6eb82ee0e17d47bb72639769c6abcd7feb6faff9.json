{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, HubInternal } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { confirmSignUp as confirmSignUp$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { isAutoSignInStarted, isAutoSignInUserUsingConfirmSignUp, setAutoSignInStarted } from '../utils/signUpHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction confirmSignUp(_x) {\n  return _confirmSignUp.apply(this, arguments);\n}\nfunction _confirmSignUp() {\n  _confirmSignUp = _asyncToGenerator(function* (input) {\n    const {\n      username,\n      confirmationCode,\n      options\n    } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      userPoolId,\n      userPoolClientId\n    } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n      username,\n      userPoolId,\n      userPoolClientId\n    });\n    yield confirmSignUp$1({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp)\n    }, {\n      Username: username,\n      ConfirmationCode: confirmationCode,\n      ClientMetadata: clientMetadata,\n      ForceAliasCreation: options?.forceAliasCreation,\n      ClientId: authConfig.userPoolClientId,\n      UserContextData\n    });\n    return new Promise((resolve, reject) => {\n      try {\n        const signUpOut = {\n          isSignUpComplete: true,\n          nextStep: {\n            signUpStep: 'DONE'\n          }\n        };\n        if (!isAutoSignInStarted() || !isAutoSignInUserUsingConfirmSignUp(username)) {\n          resolve(signUpOut);\n          return;\n        }\n        const stopListener = HubInternal.listen('auth-internal', ({\n          payload\n        }) => {\n          switch (payload.event) {\n            case 'autoSignIn':\n              resolve({\n                isSignUpComplete: true,\n                nextStep: {\n                  signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n                }\n              });\n              setAutoSignInStarted(false);\n              stopListener();\n          }\n        });\n        HubInternal.dispatch('auth-internal', {\n          event: 'confirmSignUp',\n          data: signUpOut\n        });\n      } catch (error) {\n        reject(error);\n      }\n    });\n  });\n  return _confirmSignUp.apply(this, arguments);\n}\nexport { confirmSignUp };\n//# sourceMappingURL=confirmSignUp.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}