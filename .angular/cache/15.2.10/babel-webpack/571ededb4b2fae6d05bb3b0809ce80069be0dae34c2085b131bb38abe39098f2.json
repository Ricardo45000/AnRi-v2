{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { unauthenticatedHandler, getRetryDecider, parseJsonError, jitteredBackoff, getDnsSuffix } from '@aws-amplify/core/internals/aws-client-utils';\nimport { getAmplifyUserAgent, AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { composeTransferHandler } from '@aws-amplify/core/internals/aws-client-utils/composers';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The service name used to sign requests if the API requires authentication.\n */\nconst SERVICE_NAME = 'cognito-idp';\n/**\n * The endpoint resolver function that returns the endpoint URL for a given region.\n */\nconst endpointResolver = ({\n  region\n}) => {\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  const customURL = authConfig?.userPoolEndpoint;\n  const defaultURL = new AmplifyUrl(`https://${SERVICE_NAME}.${region}.${getDnsSuffix(region)}`);\n  return {\n    url: customURL ? new AmplifyUrl(customURL) : defaultURL\n  };\n};\n/**\n * A Cognito Identity-specific middleware that disables caching for all requests.\n */\nconst disableCacheMiddlewareFactory = () => (next, _) => /*#__PURE__*/function () {\n  var _disableCacheMiddleware = _asyncToGenerator(function* (request) {\n    request.headers['cache-control'] = 'no-store';\n    return next(request);\n  });\n  function disableCacheMiddleware(_x) {\n    return _disableCacheMiddleware.apply(this, arguments);\n  }\n  return disableCacheMiddleware;\n}();\n/**\n * A Cognito Identity-specific transfer handler that does NOT sign requests, and\n * disables caching.\n *\n * @internal\n */\nconst cognitoUserPoolTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);\n/**\n * @internal\n */\nconst defaultConfig = {\n  service: SERVICE_NAME,\n  endpointResolver,\n  retryDecider: getRetryDecider(parseJsonError),\n  computeDelay: jitteredBackoff,\n  userAgentValue: getAmplifyUserAgent(),\n  cache: 'no-store'\n};\n/**\n * @internal\n */\nconst getSharedHeaders = operation => ({\n  'content-type': 'application/x-amz-json-1.1',\n  'x-amz-target': `AWSCognitoIdentityProviderService.${operation}`\n});\n/**\n * @internal\n */\nconst buildHttpRpcRequest = ({\n  url\n}, headers, body) => ({\n  headers,\n  url,\n  body,\n  method: 'POST'\n});\nexport { buildHttpRpcRequest, cognitoUserPoolTransferHandler, defaultConfig, getSharedHeaders };\n//# sourceMappingURL=base.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}