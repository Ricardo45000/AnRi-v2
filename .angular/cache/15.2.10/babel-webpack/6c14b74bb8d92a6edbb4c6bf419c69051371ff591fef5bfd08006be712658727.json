{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { forgetDevice as forgetDevice$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertAuthTokens, assertDeviceMetadata } from '../utils/types.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Forget a remembered device while authenticated.\n *\n * @param input - The ForgetDeviceInput object.\n * @throws - {@link ForgetDeviceException} - Cognito service errors thrown when\n * forgetting device with invalid device key\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction forgetDevice(_x) {\n  return _forgetDevice.apply(this, arguments);\n}\nfunction _forgetDevice() {\n  _forgetDevice = _asyncToGenerator(function* (input) {\n    const {\n      device: {\n        id: externalDeviceKey\n      } = {\n        id: undefined\n      }\n    } = input ?? {};\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      tokens\n    } = yield fetchAuthSession();\n    assertAuthTokens(tokens);\n    const deviceMetadata = yield tokenOrchestrator.getDeviceMetadata();\n    const currentDeviceKey = deviceMetadata?.deviceKey;\n    if (!externalDeviceKey) assertDeviceMetadata(deviceMetadata);\n    yield forgetDevice$1({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ForgetDevice)\n    }, {\n      AccessToken: tokens.accessToken.toString(),\n      DeviceKey: externalDeviceKey ?? currentDeviceKey\n    });\n    if (!externalDeviceKey || externalDeviceKey === currentDeviceKey) yield tokenOrchestrator.clearDeviceMetadata();\n  });\n  return _forgetDevice.apply(this, arguments);\n}\nexport { forgetDevice };\n//# sourceMappingURL=forgetDevice.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}