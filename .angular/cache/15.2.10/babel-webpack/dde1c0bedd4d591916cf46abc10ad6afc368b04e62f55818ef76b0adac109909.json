{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let ChartService = /*#__PURE__*/(() => {\n  class ChartService {\n    constructor() {}\n    //---------------------------- NON essentials --------------------------------\n    mixLists(listA, listB) {\n      const minLength = Math.min(listA.length, listB.length);\n      const mixedList = Array.from({\n        length: minLength\n      }).map((_, i) => `${listA[i]} / ${listB[i]}`).reduce((acc, mixedValue) => {\n        acc.push(mixedValue);\n        return acc;\n      }, []);\n      const remainingA = listA.slice(minLength).map(value => `${value} / -`);\n      const remainingB = listB.slice(minLength).map(value => `- / ${value}`);\n      return mixedList.concat(remainingA, remainingB);\n    }\n    getLabelForDataset(list) {\n      return list[0] + ' to ' + list.pop();\n    }\n    // Helper function to get ISO week number\n    getISOWeek(date) {\n      const dt = new Date(date);\n      dt.setDate(dt.getDate() + 4 - (dt.getDay() || 7));\n      const yearStart = new Date(dt.getFullYear(), 0, 1);\n      return Math.ceil(((dt.getTime() - yearStart.getTime()) / 86400000 + 1) / 7);\n    }\n    getLabelForChart(timeUnit, firstList, secondList) {\n      return ['From ' + firstList[0] + ' to ' + firstList.pop() + ' | ' + 'From ' + secondList[0] + ' to ' + secondList.pop()];\n    }\n    incrementDate(date, timeUnit) {\n      switch (timeUnit) {\n        case 'day':\n          date.setDate(date.getDate() + 1);\n          break;\n        case 'week':\n          date.setDate(date.getDate() + 7);\n          break;\n        case 'month':\n          date.setMonth(date.getMonth() + 1);\n          break;\n        case 'year':\n          date.setFullYear(date.getFullYear() + 1);\n          break;\n      }\n    }\n    static ɵfac = function ChartService_Factory(t) {\n      return new (t || ChartService)();\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ChartService,\n      factory: ChartService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return ChartService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}