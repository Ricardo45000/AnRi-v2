{"ast":null,"code":"import kebabCase from 'lodash/kebabCase.js';\nimport usesReference from 'style-dictionary/lib/utils/references/usesReference.js';\nimport '@aws-amplify/core/internals/utils';\nimport '../utils/setUserAgent/constants.mjs';\nimport { isObject, has, isString } from '../utils/utils.mjs';\nconst CSS_VARIABLE_PREFIX = 'amplify';\n// Important: these properties should not be altered in\n// order to maintain the expected order of the CSS `box-shadow` property\nconst SHADOW_PROPERTIES = ['offsetX', 'offsetY', 'blurRadius', 'spreadRadius', 'color'];\nfunction referenceValue(value) {\n  if (!value) return '';\n  if (usesReference(value)) {\n    const path = value.replace(/\\{|\\}/g, '').replace('.value', '').split('.');\n    return `var(--${cssNameTransform({\n      path\n    })})`;\n  }\n  return value;\n}\nfunction cssValue(token) {\n  const {\n    value\n  } = token;\n  if (isString(value)) {\n    return referenceValue(value);\n  }\n  if (isShadowTokenObject(value)) {\n    return SHADOW_PROPERTIES.map(property => {\n      return referenceValue(\n      // lookup property against `token` first for custom non-nested value, then lookup\n      // property against `value` for design token value\n      isShadowTokenObject(token) ? token[property] : value[property]);\n    }).join(' ');\n  }\n  return value;\n}\nfunction cssNameTransform({\n  path = []\n}) {\n  return `${kebabCase([CSS_VARIABLE_PREFIX, ...path].join(' '))}`;\n}\n/**\n * Helper function to test if something is a design token or not.\n * Used in the React component style props.\n *\n * @param value - thing to test if it is a design token or not\n * @returns boolean\n */\nfunction isDesignToken(value) {\n  return isObject(value) && has(value, 'value');\n}\nfunction isShadowTokenObject(value) {\n  return isObject(value) && has(value, 'offsetX');\n}\n/**\n * Recursive function that will walk down the token object\n * and perform the setupToken function on each token.\n * Similar to what Style Dictionary does.\n */\nfunction setupTokens({\n  tokens,\n  path = [],\n  setupToken\n}) {\n  if (has(tokens, 'value')) {\n    return setupToken({\n      token: tokens,\n      path\n    });\n  }\n  const output = {};\n  for (const name in tokens) {\n    if (has(tokens, name)) {\n      const value = tokens[name];\n      const nextTokens = isObject(value) ? value : {\n        value\n      };\n      output[name] = setupTokens({\n        tokens: nextTokens,\n        path: path.concat(name),\n        setupToken\n      });\n    }\n  }\n  return output;\n}\nexport { CSS_VARIABLE_PREFIX, cssNameTransform, cssValue, isDesignToken, isShadowTokenObject, setupTokens };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}