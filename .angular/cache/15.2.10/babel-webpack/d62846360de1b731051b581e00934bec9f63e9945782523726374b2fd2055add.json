{"ast":null,"code":"import { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\nimport { I18n as I18n$1 } from './I18n.mjs';\nimport { assert, I18nErrorCode } from './errorHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('I18n');\nlet _config = {\n  language: null\n};\nlet _i18n = null;\n/**\n * Export I18n APIs\n */\nclass I18n {\n  /**\n   * @static\n   * @method\n   * Configure I18n part\n   * @param {Object} config - Configuration of the I18n\n   */\n  static configure(config) {\n    logger.debug('configure I18n');\n    if (!config) {\n      return _config;\n    }\n    _config = Object.assign({}, _config, config.I18n || config);\n    I18n.createInstance();\n    return _config;\n  }\n  static getModuleName() {\n    return 'I18n';\n  }\n  /**\n   * @static\n   * @method\n   * Create an instance of I18n for the library\n   */\n  static createInstance() {\n    logger.debug('create I18n instance');\n    if (_i18n) {\n      return;\n    }\n    _i18n = new I18n$1();\n  }\n  /**\n   * @static @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  static setLanguage(lang) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    _i18n.setLanguage(lang);\n  }\n  /**\n   * @static @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  static get(key, defVal) {\n    if (!I18n.checkConfig()) {\n      return typeof defVal === 'undefined' ? key : defVal;\n    }\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    return _i18n.get(key, defVal);\n  }\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {String} language - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  static putVocabulariesForLanguage(language, vocabularies) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    _i18n.putVocabulariesForLanguage(language, vocabularies);\n  }\n  /**\n   * @static\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  static putVocabularies(vocabularies) {\n    I18n.checkConfig();\n    assert(!!_i18n, I18nErrorCode.NotConfigured);\n    _i18n.putVocabularies(vocabularies);\n  }\n  static checkConfig() {\n    if (!_i18n) {\n      I18n.createInstance();\n    }\n    return true;\n  }\n}\n// Create an instance of I18n in the static class\nI18n.createInstance();\nexport { I18n };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}