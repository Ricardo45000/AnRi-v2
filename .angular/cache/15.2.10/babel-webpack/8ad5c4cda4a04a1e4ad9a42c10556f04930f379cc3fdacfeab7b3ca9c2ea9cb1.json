{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { withMemoization } from '../utils/memoization.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst shouldSendBody = method => !['HEAD', 'GET', 'DELETE'].includes(method.toUpperCase());\n// TODO[AllanZhengYP]: we need to provide isCanceledError utility\nconst fetchTransferHandler = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    url,\n    method,\n    headers,\n    body\n  }, {\n    abortSignal,\n    cache,\n    withCrossDomainCredentials\n  }) {\n    let resp;\n    try {\n      resp = yield fetch(url, {\n        method,\n        headers,\n        body: shouldSendBody(method) ? body : undefined,\n        signal: abortSignal,\n        cache,\n        credentials: withCrossDomainCredentials ? 'include' : 'same-origin'\n      });\n    } catch (e) {\n      // TODO: needs to revise error handling in v6\n      // For now this is a thin wrapper over original fetch error similar to cognito-identity-js package.\n      // Ref: https://github.com/aws-amplify/amplify-js/blob/4fbc8c0a2be7526aab723579b4c95b552195a80b/packages/amazon-cognito-identity-js/src/Client.js#L103-L108\n      if (e instanceof TypeError) {\n        throw new Error('Network error');\n      }\n      throw e;\n    }\n    const responseHeaders = {};\n    resp.headers?.forEach((value, key) => {\n      responseHeaders[key.toLowerCase()] = value;\n    });\n    const httpResponse = {\n      statusCode: resp.status,\n      headers: responseHeaders,\n      body: null\n    };\n    // resp.body is a ReadableStream according to Fetch API spec, but React Native\n    // does not implement it.\n    const bodyWithMixin = Object.assign(resp.body ?? {}, {\n      text: withMemoization(() => resp.text()),\n      blob: withMemoization(() => resp.blob()),\n      json: withMemoization(() => resp.json())\n    });\n    return {\n      ...httpResponse,\n      body: bodyWithMixin\n    };\n  });\n  return function fetchTransferHandler(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { fetchTransferHandler };\n//# sourceMappingURL=fetch.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}