{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { signInWithCustomAuth } from './signInWithCustomAuth.mjs';\nimport { signInWithCustomSRPAuth } from './signInWithCustomSRPAuth.mjs';\nimport { signInWithSRP } from './signInWithSRP.mjs';\nimport { signInWithUserPassword } from './signInWithUserPassword.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in\n *\n * @param input -  The SignInInput object\n * @returns SignInOutput\n * @throws service: {@link InitiateAuthException }, {@link RespondToAuthChallengeException }\n *  - Cognito service errors thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction signIn(_x) {\n  return _signIn.apply(this, arguments);\n}\nfunction _signIn() {\n  _signIn = _asyncToGenerator(function* (input) {\n    const authFlowType = input.options?.authFlowType;\n    yield assertUserNotAuthenticated();\n    switch (authFlowType) {\n      case 'USER_SRP_AUTH':\n        return signInWithSRP(input);\n      case 'USER_PASSWORD_AUTH':\n        return signInWithUserPassword(input);\n      case 'CUSTOM_WITHOUT_SRP':\n        return signInWithCustomAuth(input);\n      case 'CUSTOM_WITH_SRP':\n        return signInWithCustomSRPAuth(input);\n      default:\n        return signInWithSRP(input);\n    }\n  });\n  return _signIn.apply(this, arguments);\n}\nexport { signIn };\n//# sourceMappingURL=signIn.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}