{"ast":null,"code":"import { Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { AirtableService } from 'environments/airtable/airtable.service';\nimport { AuthserviceService } from 'environments/airtable/authservice.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"environments/airtable/airtable.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"environments/airtable/authservice.service\";\nimport * as i4 from \"@ngx-translate/core\";\nimport * as i5 from \"@angular/common\";\nfunction CustomerTableComponent_div_0_tr_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\")(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\");\n    i0.ɵɵtext(6);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const row_r2 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(row_r2[3]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(row_r2[4]);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(row_r2[2]);\n  }\n}\nfunction CustomerTableComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1)(1, \"div\", 2)(2, \"div\", 3)(3, \"div\", 4)(4, \"div\", 5)(5, \"h4\", 6);\n    i0.ɵɵtext(6);\n    i0.ɵɵpipe(7, \"translate\");\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(8, \"div\", 7)(9, \"table\", 8)(10, \"thead\")(11, \"tr\")(12, \"th\");\n    i0.ɵɵtext(13);\n    i0.ɵɵpipe(14, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(15, \"th\");\n    i0.ɵɵtext(16);\n    i0.ɵɵpipe(17, \"translate\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(18, \"th\");\n    i0.ɵɵtext(19);\n    i0.ɵɵpipe(20, \"translate\");\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(21, \"tbody\");\n    i0.ɵɵtemplate(22, CustomerTableComponent_div_0_tr_22_Template, 7, 3, \"tr\", 9);\n    i0.ɵɵelementEnd()()()()()()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(6);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(7, 5, \"My customers\"));\n    i0.ɵɵadvance(7);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(14, 7, ctx_r0.dataTable == null ? null : ctx_r0.dataTable.headerRow[3]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 9, ctx_r0.dataTable == null ? null : ctx_r0.dataTable.headerRow[4]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(20, 11, ctx_r0.dataTable == null ? null : ctx_r0.dataTable.headerRow[2]));\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.dataTable == null ? null : ctx_r0.dataTable.dataRows);\n  }\n}\nexport let CustomerTableComponent = /*#__PURE__*/(() => {\n  class CustomerTableComponent {\n    airtableService;\n    router;\n    authService;\n    translate;\n    dataTable = {\n      headerRow: [],\n      dataRows: []\n    };\n    dtInstance;\n    constructor(airtableService, router, authService, translate) {\n      this.airtableService = airtableService;\n      this.router = router;\n      this.authService = authService;\n      this.translate = translate;\n      this.translate.setDefaultLang(\"en\");\n    }\n    // Create a function to convert USERS array to DataTable\n    convertToDataTable(users) {\n      // Extract header row from the first user object (assuming all objects have the same structure)\n      const headerRow = Object.keys(users[0]);\n      // Extract data rows\n      const dataRows = users.map(user => Object.values(user).map((value, index) => (index === 3 || index === 4) && value !== null && value !== undefined && value !== '' ? value.toString().replace(/[\\r\\n]+/g, '\\n') : '\\n'));\n      return {\n        headerRow,\n        dataRows\n      };\n    }\n    ngOnInit() {\n      if (this.authService.checkConnection()) {\n        this.airtableService.getRecords().then(records => {\n          if (records && records.length > 0) {\n            this.dataTable = this.convertToDataTable(records);\n          } else {\n            console.error('No record found.');\n            this.dataTable.headerRow = [\"Waiting a customer...\"];\n            this.dataTable.dataRows = [['']];\n          }\n        }).catch(error => {\n          console.error('Error fetching records:', error);\n        });\n      } else {\n        this.router.navigate(['/pages/lock']);\n      }\n    }\n    ngAfterViewInit() {\n      setTimeout(() => {\n        this.initDataTable();\n      });\n    }\n    initDataTable() {\n      // Wrap the initialization logic in a Promise\n      return new Promise(resolve => {\n        const checkCondition = () => {\n          if (this.dataTable.dataRows.length > 0) {\n            // If the condition is met, proceed with DataTable initialization\n            this.dtInstance = $('#datatable').DataTable({\n              columnDefs: [{\n                targets: [0],\n                width: '15%'\n              }, {\n                targets: [1],\n                width: '70%'\n              }, {\n                targets: [2],\n                width: '15%'\n              } // Assuming \"date\" is the third column\n              ],\n\n              \"pagingType\": \"full_numbers\",\n              \"lengthMenu\": [[10, 25, 50, -1], [10, 25, 50, \"All\"]],\n              \"order\": [[this.dataTable.headerRow.indexOf('date'), 'desc']],\n              responsive: true,\n              language: {\n                search: \"_INPUT_\",\n                searchPlaceholder: \"Search records\"\n              },\n              initComplete: function () {\n                const api = this.api();\n                // Create a new row below the header row for filter inputs\n                const filterRow = $(api.table().header()).closest('thead')[0].insertRow(-1);\n                // Create an input element for each column and append it to the new row\n                api.columns().every(function (index) {\n                  const column = this;\n                  const cell = filterRow.insertCell(-1);\n                  $(cell).addClass('header-filter-cell');\n                  const input = document.createElement(\"input\");\n                  $(input).appendTo($(cell)).on('keyup change', function () {\n                    column.search($(this).val()).draw();\n                  }).attr('placeholder', api.column(index).header().textContent).css('width', '100%');\n                });\n                // Add overflow style to make it scrollable\n                $('#datatable_wrapper').css('overflow', 'auto');\n                // Resolve the Promise after DataTable initialization\n                resolve();\n              }\n            });\n          } else {\n            setTimeout(checkCondition, 100);\n          }\n        };\n        // Start checking the condition\n        checkCondition();\n      });\n    }\n    static ɵfac = function CustomerTableComponent_Factory(t) {\n      return new (t || CustomerTableComponent)(i0.ɵɵdirectiveInject(i1.AirtableService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthserviceService), i0.ɵɵdirectiveInject(i4.TranslateService));\n    };\n    static ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: CustomerTableComponent,\n      selectors: [[\"customer-table-cmp\"]],\n      decls: 1,\n      vars: 1,\n      consts: [[\"class\", \"main-content\", 4, \"ngIf\"], [1, \"main-content\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"id\", \"datatable\", \"cellspacing\", \"0\", \"width\", \"100%\", 1, \"hover\", \"table\", \"table-striped\", \"table-bordered\"], [4, \"ngFor\", \"ngForOf\"]],\n      template: function CustomerTableComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, CustomerTableComponent_div_0_Template, 23, 13, \"div\", 0);\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"ngIf\", ctx.dataTable && ctx.dataTable.dataRows.length > 0);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i4.TranslatePipe],\n      encapsulation: 2\n    });\n  }\n  return CustomerTableComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}