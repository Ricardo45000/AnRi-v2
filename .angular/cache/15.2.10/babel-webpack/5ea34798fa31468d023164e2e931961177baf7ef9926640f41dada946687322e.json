{"ast":null,"code":"import { actions } from 'xstate';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { trimValues } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\nimport 'aws-amplify';\nimport { sanitizePhoneNumber, getUsernameSignUp } from './utils.mjs';\nconst {\n  assign\n} = actions;\nconst clearActorDoneData = assign({\n  actorDoneData: undefined\n});\nconst clearChallengeName = assign({\n  challengeName: undefined\n});\nconst clearMissingAttributes = assign({\n  missingAttributes: undefined\n});\nconst clearError = assign({\n  remoteError: undefined\n});\nconst clearFormValues = assign({\n  formValues: {}\n});\nconst clearTouched = assign({\n  touched: {}\n});\nconst clearUser = assign({\n  user: undefined\n});\nconst clearValidationError = assign({\n  validationError: {}\n});\n/**\n * \"set\" actions\n */\nconst setTotpSecretCode = assign({\n  totpSecretCode: (_, {\n    data\n  }) => {\n    const {\n      sharedSecret\n    } = data.nextStep?.totpSetupDetails ?? {};\n    return sharedSecret;\n  }\n});\nconst setSignInStep = assign({\n  step: 'SIGN_IN'\n});\nconst setShouldVerifyUserAttributeStep = assign({\n  step: 'SHOULD_CONFIRM_USER_ATTRIBUTE'\n});\nconst setConfirmAttributeCompleteStep = assign({\n  step: 'CONFIRM_ATTRIBUTE_COMPLETE'\n});\n// map v6 `signInStep` to v5 `challengeName`\nconst setChallengeName = assign({\n  challengeName: (_, {\n    data\n  }) => {\n    const {\n      signInStep\n    } = data.nextStep;\n    return signInStep === 'CONFIRM_SIGN_IN_WITH_SMS_CODE' ? 'SMS_MFA' : signInStep === 'CONFIRM_SIGN_IN_WITH_TOTP_CODE' ? 'SOFTWARE_TOKEN_MFA' : undefined;\n  }\n});\nconst setUsernameForgotPassword = assign({\n  username: ({\n    formValues,\n    loginMechanisms\n  }) => {\n    const loginMechanism = loginMechanisms[0];\n    const {\n      username,\n      country_code\n    } = formValues;\n    if (loginMechanism === 'phone_number') {\n      // forgot password `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // default username field for loginMechanism === 'email' is \"username\" for SignIn\n    return username;\n  }\n});\nconst setUsernameSignUp = assign({\n  username: getUsernameSignUp\n});\nconst setUsernameSignIn = assign({\n  username: ({\n    formValues,\n    loginMechanisms\n  }) => {\n    const loginMechanism = loginMechanisms[0];\n    const {\n      username,\n      country_code\n    } = formValues;\n    if (loginMechanism === 'phone_number') {\n      // sign in `formValues` uses `username` for base phone number value\n      // prefix `country_code` for full `username`\n      return sanitizePhoneNumber(country_code, username);\n    }\n    // return `email` and `username`\n    return username;\n  }\n});\nconst setNextSignInStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.signInStep === 'DONE' ? 'SIGN_IN_COMPLETE' : data.nextStep.signInStep\n});\nconst setNextSignUpStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.signUpStep === 'DONE' ? 'SIGN_UP_COMPLETE' : data.nextStep.signUpStep\n});\nconst setNextResetPasswordStep = assign({\n  step: (_, {\n    data\n  }) => data.nextStep.resetPasswordStep === 'DONE' ? 'RESET_PASSWORD_COMPLETE' : data.nextStep.resetPasswordStep\n});\nconst setMissingAttributes = assign({\n  missingAttributes: (_, {\n    data\n  }) => data.nextStep?.missingAttributes\n});\nconst setFieldErrors = assign({\n  validationError: (_, {\n    data\n  }) => data\n});\nconst setRemoteError = assign({\n  remoteError: (_, {\n    data\n  }) => {\n    if (data.name === 'NoUserPoolError') {\n      return `Configuration error (see console) â€“ please contact the administrator`;\n    }\n    return data?.message || data;\n  }\n});\nconst setUser = assign({\n  user: (_, {\n    data\n  }) => data\n});\nconst resolveCodeDeliveryDetails = details => ({\n  Destination: details.destination,\n  DeliveryMedium: details.deliveryMedium,\n  AttributeName: details.attributName\n});\nconst setCodeDeliveryDetails = assign({\n  codeDeliveryDetails: (_, {\n    data\n  }) => {\n    if (data?.nextStep?.codeDeliveryDetails) {\n      return resolveCodeDeliveryDetails(data.nextStep.codeDeliveryDetails);\n    }\n    return resolveCodeDeliveryDetails(data);\n  }\n});\nconst handleInput = assign({\n  formValues: (context, {\n    data\n  }) => {\n    const {\n      name,\n      value\n    } = data;\n    return {\n      ...context['formValues'],\n      [name]: value\n    };\n  }\n});\nconst handleSubmit = assign({\n  formValues: (context, {\n    data\n  }) =>\n  // do not trim password\n  trimValues({\n    ...context['formValues'],\n    ...data\n  }, 'password')\n});\nconst handleBlur = assign({\n  touched: (context, {\n    data\n  }) => ({\n    ...context['touched'],\n    [data.name]: true\n  })\n});\nconst setUnverifiedUserAttributes = assign({\n  unverifiedUserAttributes: (_, {\n    data\n  }) => {\n    const {\n      email,\n      phone_number\n    } = data;\n    const unverifiedUserAttributes = {\n      ...(email && {\n        email\n      }),\n      ...(phone_number && {\n        phone_number\n      })\n    };\n    return unverifiedUserAttributes;\n  }\n});\nconst clearSelectedUserAttribute = assign({\n  selectedUserAttribute: undefined\n});\nconst setSelectedUserAttribute = assign({\n  selectedUserAttribute: context => context.formValues?.unverifiedAttr\n});\n// Maps to unexposed `ConfirmSignUpSignUpStep`\nconst setConfirmSignUpSignUpStep = assign({\n  step: 'CONFIRM_SIGN_UP'\n});\nconst ACTIONS = {\n  clearActorDoneData,\n  clearChallengeName,\n  clearError,\n  clearFormValues,\n  clearMissingAttributes,\n  clearSelectedUserAttribute,\n  clearTouched,\n  clearUser,\n  clearValidationError,\n  handleBlur,\n  handleInput,\n  handleSubmit,\n  setChallengeName,\n  setCodeDeliveryDetails,\n  setFieldErrors,\n  setMissingAttributes,\n  setNextResetPasswordStep,\n  setNextSignInStep,\n  setNextSignUpStep,\n  setRemoteError,\n  setConfirmAttributeCompleteStep,\n  setConfirmSignUpSignUpStep,\n  setShouldVerifyUserAttributeStep,\n  setSelectedUserAttribute,\n  setSignInStep,\n  setTotpSecretCode,\n  setUser,\n  setUnverifiedUserAttributes,\n  setUsernameForgotPassword,\n  setUsernameSignIn,\n  setUsernameSignUp\n};\nexport { ACTIONS as default };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}