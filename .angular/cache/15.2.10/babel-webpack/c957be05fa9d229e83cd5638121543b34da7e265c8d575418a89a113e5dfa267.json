{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { verifyUserAttribute } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a user attribute with the confirmation code.\n *\n * @param input -  The ConfirmUserAttributeInput object\n * @throws  -{@link AuthValidationErrorCode } -\n * Thrown when `confirmationCode` is not defined.\n * @throws  -{@link VerifyUserAttributeException } - Thrown due to an invalid confirmation code or attribute.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction confirmUserAttribute(_x) {\n  return _confirmUserAttribute.apply(this, arguments);\n}\nfunction _confirmUserAttribute() {\n  _confirmUserAttribute = _asyncToGenerator(function* (input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      confirmationCode,\n      userAttributeKey\n    } = input;\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmUserAttributeCode);\n    const {\n      tokens\n    } = yield fetchAuthSession({\n      forceRefresh: false\n    });\n    assertAuthTokens(tokens);\n    yield verifyUserAttribute({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmUserAttribute)\n    }, {\n      AccessToken: tokens.accessToken.toString(),\n      AttributeName: userAttributeKey,\n      Code: confirmationCode\n    });\n  });\n  return _confirmUserAttribute.apply(this, arguments);\n}\nexport { confirmUserAttribute };\n//# sourceMappingURL=confirmUserAttribute.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}