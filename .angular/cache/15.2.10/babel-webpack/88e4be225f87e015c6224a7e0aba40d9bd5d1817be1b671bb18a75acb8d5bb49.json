{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConsoleLogger, getId } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { getRegionFromIdentityPoolId } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { formLoginsMap } from './utils.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('CognitoIdentityIdProvider');\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: {@link InvalidIdentityPoolIdException }\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nfunction cognitoIdentityIdProvider(_x) {\n  return _cognitoIdentityIdProvider.apply(this, arguments);\n}\nfunction _cognitoIdentityIdProvider() {\n  _cognitoIdentityIdProvider = _asyncToGenerator(function* ({\n    tokens,\n    authConfig,\n    identityIdStore\n  }) {\n    identityIdStore.setAuthConfig({\n      Cognito: authConfig\n    });\n    // will return null only if there is no identityId cached or if there is an error retrieving it\n    let identityId = yield identityIdStore.loadIdentityId();\n    // Tokens are available so return primary identityId\n    if (tokens) {\n      // If there is existing primary identityId in-memory return that\n      if (identityId && identityId.type === 'primary') {\n        return identityId.id;\n      } else {\n        const logins = tokens.idToken ? formLoginsMap(tokens.idToken.toString()) : {};\n        const generatedIdentityId = yield generateIdentityId(logins, authConfig);\n        if (identityId && identityId.id === generatedIdentityId) {\n          logger.debug(`The guest identity ${identityId.id} has become the primary identity.`);\n        }\n        identityId = {\n          id: generatedIdentityId,\n          type: 'primary'\n        };\n      }\n    } else {\n      // If there is existing guest identityId cached return that\n      if (identityId && identityId.type === 'guest') {\n        return identityId.id;\n      } else {\n        identityId = {\n          id: yield generateIdentityId({}, authConfig),\n          type: 'guest'\n        };\n      }\n    }\n    // Store in-memory or local storage depending on guest or primary identityId\n    identityIdStore.storeIdentityId(identityId);\n    return identityId.id;\n  });\n  return _cognitoIdentityIdProvider.apply(this, arguments);\n}\nfunction generateIdentityId(_x2, _x3) {\n  return _generateIdentityId.apply(this, arguments);\n}\nfunction _generateIdentityId() {\n  _generateIdentityId = _asyncToGenerator(function* (logins, authConfig) {\n    const identityPoolId = authConfig?.identityPoolId;\n    const region = getRegionFromIdentityPoolId(identityPoolId);\n    // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n    const idResult =\n    // for a first-time user, this will return a brand new identity\n    // for a returning user, this will retrieve the previous identity assocaited with the logins\n    (yield getId({\n      region\n    }, {\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    })).IdentityId;\n    if (!idResult) {\n      throw new AuthError({\n        name: 'GetIdResponseException',\n        message: 'Received undefined response from getId operation',\n        recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.'\n      });\n    }\n    return idResult;\n  });\n  return _generateIdentityId.apply(this, arguments);\n}\nexport { cognitoIdentityIdProvider };\n//# sourceMappingURL=IdentityIdProvider.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}