{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { retryOnResourceNotFoundException, handleUserPasswordAuthFlow, getActiveSignInUsername, getNewDeviceMetatada, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { setActiveSignInState, cleanActiveSignInState } from '../utils/signInStore.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs a user in using USER_PASSWORD_AUTH AuthFlowType\n *\n * @param input - The SignInWithUserPasswordInput object\n * @returns SignInWithUserPasswordOutput\n * @throws service: {@link InitiateAuthException } - Cognito service error thrown during the sign-in process.\n * @throws validation: {@link AuthValidationErrorCode  } - Validation errors thrown when either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction signInWithUserPassword(_x) {\n  return _signInWithUserPassword.apply(this, arguments);\n}\nfunction _signInWithUserPassword() {\n  _signInWithUserPassword = _asyncToGenerator(function* (input) {\n    const {\n      username,\n      password,\n      options\n    } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signInDetails = {\n      loginId: username,\n      authFlowType: 'USER_PASSWORD_AUTH'\n    };\n    assertTokenProviderConfig(authConfig);\n    const metadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignInUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignInPassword);\n    try {\n      const {\n        ChallengeName: retiredChallengeName,\n        ChallengeParameters: retriedChallengeParameters,\n        AuthenticationResult,\n        Session\n      } = yield retryOnResourceNotFoundException(handleUserPasswordAuthFlow, [username, password, metadata, authConfig, tokenOrchestrator], username, tokenOrchestrator);\n      const activeUsername = getActiveSignInUsername(username);\n      // sets up local state used during the sign-in process\n      setActiveSignInState({\n        signInSession: Session,\n        username: activeUsername,\n        challengeName: retiredChallengeName,\n        signInDetails\n      });\n      if (AuthenticationResult) {\n        yield cacheCognitoTokens({\n          ...AuthenticationResult,\n          username: activeUsername,\n          NewDeviceMetadata: yield getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n          signInDetails\n        });\n        cleanActiveSignInState();\n        yield dispatchSignedInHubEvent();\n        return {\n          isSignedIn: true,\n          nextStep: {\n            signInStep: 'DONE'\n          }\n        };\n      }\n      return getSignInResult({\n        challengeName: retiredChallengeName,\n        challengeParameters: retriedChallengeParameters\n      });\n    } catch (error) {\n      cleanActiveSignInState();\n      assertServiceError(error);\n      const result = getSignInResultFromError(error.name);\n      if (result) return result;\n      throw error;\n    }\n  });\n  return _signInWithUserPassword.apply(this, arguments);\n}\nexport { signInWithUserPassword };\n//# sourceMappingURL=signInWithUserPassword.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}