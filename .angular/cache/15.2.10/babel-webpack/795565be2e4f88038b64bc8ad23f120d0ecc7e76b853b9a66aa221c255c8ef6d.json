{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { signUp as signUp$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { toAttributeType } from '../utils/apiHelpers.mjs';\nimport { setUsernameUsedForAutoSignIn, setAutoSignInStarted, isSignUpComplete, isAutoSignInStarted, autoSignInUserConfirmed, handleCodeAutoSignIn, autoSignInWhenUserIsConfirmedWithLink } from '../utils/signUpHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { setAutoSignIn } from './autoSignIn.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Creates a user\n *\n * @param input - The SignUpInput object\n * @returns SignUpOutput\n * @throws service: {@link SignUpException } - Cognito service errors thrown during the sign-up process.\n * @throws validation: {@link AuthValidationErrorCode } - Validation errors thrown either username or password\n *  are not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction signUp(_x) {\n  return _signUp.apply(this, arguments);\n}\nfunction _signUp() {\n  _signUp = _asyncToGenerator(function* (input) {\n    const {\n      username,\n      password,\n      options\n    } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    const signUpVerificationMethod = authConfig?.signUpVerificationMethod ?? 'code';\n    const {\n      clientMetadata,\n      validationData,\n      autoSignIn\n    } = input.options ?? {};\n    assertTokenProviderConfig(authConfig);\n    assertValidationError(!!username, AuthValidationErrorCode.EmptySignUpUsername);\n    assertValidationError(!!password, AuthValidationErrorCode.EmptySignUpPassword);\n    const signInServiceOptions = typeof autoSignIn !== 'boolean' ? autoSignIn : undefined;\n    const signInInput = {\n      username,\n      options: signInServiceOptions\n    };\n    // if the authFlowType is 'CUSTOM_WITHOUT_SRP' then we don't include the password\n    if (signInServiceOptions?.authFlowType !== 'CUSTOM_WITHOUT_SRP') {\n      signInInput.password = password;\n    }\n    if (signInServiceOptions || autoSignIn === true) {\n      setUsernameUsedForAutoSignIn(username);\n      setAutoSignInStarted(true);\n    }\n    const clientOutput = yield signUp$1({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SignUp)\n    }, {\n      Username: username,\n      Password: password,\n      UserAttributes: options?.userAttributes && toAttributeType(options?.userAttributes),\n      ClientMetadata: clientMetadata,\n      ValidationData: validationData && toAttributeType(validationData),\n      ClientId: authConfig.userPoolClientId\n    });\n    const {\n      UserSub,\n      CodeDeliveryDetails\n    } = clientOutput;\n    if (isSignUpComplete(clientOutput) && isAutoSignInStarted()) {\n      setAutoSignIn(autoSignInUserConfirmed(signInInput));\n      return {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n        }\n      };\n    } else if (isSignUpComplete(clientOutput) && !isAutoSignInStarted()) {\n      return {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'DONE'\n        }\n      };\n    } else if (!isSignUpComplete(clientOutput) && isAutoSignInStarted() && signUpVerificationMethod === 'code') {\n      handleCodeAutoSignIn(signInInput);\n    } else if (!isSignUpComplete(clientOutput) && isAutoSignInStarted() && signUpVerificationMethod === 'link') {\n      setAutoSignIn(autoSignInWhenUserIsConfirmedWithLink(signInInput));\n      return {\n        isSignUpComplete: false,\n        nextStep: {\n          signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n          codeDeliveryDetails: {\n            deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n            destination: CodeDeliveryDetails?.Destination,\n            attributeName: CodeDeliveryDetails?.AttributeName\n          }\n        },\n        userId: UserSub\n      };\n    }\n    return {\n      isSignUpComplete: false,\n      nextStep: {\n        signUpStep: 'CONFIRM_SIGN_UP',\n        codeDeliveryDetails: {\n          deliveryMedium: CodeDeliveryDetails?.DeliveryMedium,\n          destination: CodeDeliveryDetails?.Destination,\n          attributeName: CodeDeliveryDetails?.AttributeName\n        }\n      },\n      userId: UserSub\n    };\n  });\n  return _signUp.apply(this, arguments);\n}\nexport { signUp };\n//# sourceMappingURL=signUp.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}