{"ast":null,"code":"import { ConsoleLogger } from '../Logger/ConsoleLogger.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('I18n');\n/**\n * Language translation utility.\n */\nlet I18n$1 = class I18n {\n  constructor() {\n    /**\n     * @private\n     */\n    this._options = null;\n    /**\n     * @private\n     */\n    this._lang = null;\n    /**\n     * @private\n     */\n    this._dict = {};\n  }\n  /**\n   * Sets the default language from the configuration when required.\n   */\n  setDefaultLanguage() {\n    // Default to window language if not set in instance\n    if (!this._lang && typeof window !== 'undefined' && window && window.navigator) {\n      this._lang = window.navigator.language;\n    }\n    logger.debug(this._lang);\n  }\n  /**\n   * @method\n   * Explicitly setting language\n   * @param {String} lang\n   */\n  setLanguage(lang) {\n    this._lang = lang;\n  }\n  /**\n   * @method\n   * Get value\n   * @param {String} key\n   * @param {String} defVal - Default value\n   */\n  get(key, defVal = undefined) {\n    this.setDefaultLanguage();\n    if (!this._lang) {\n      return typeof defVal !== 'undefined' ? defVal : key;\n    }\n    const lang = this._lang;\n    let val = this.getByLanguage(key, lang);\n    if (val) {\n      return val;\n    }\n    if (lang.indexOf('-') > 0) {\n      val = this.getByLanguage(key, lang.split('-')[0]);\n    }\n    if (val) {\n      return val;\n    }\n    return typeof defVal !== 'undefined' ? defVal : key;\n  }\n  /**\n   * @method\n   * Get value according to specified language\n   * @param {String} key\n   * @param {String} language - Specified langurage to be used\n   * @param {String} defVal - Default value\n   */\n  getByLanguage(key, language, defVal = null) {\n    if (!language) {\n      return defVal;\n    }\n    const langDict = this._dict[language];\n    if (!langDict) {\n      return defVal;\n    }\n    return langDict[key];\n  }\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {String} language - Language of the dictionary\n   * @param {Object} vocabularies - Object that has key-value as dictionary entry\n   */\n  putVocabulariesForLanguage(language, vocabularies) {\n    let langDict = this._dict[language];\n    if (!langDict) {\n      langDict = this._dict[language] = {};\n    }\n    this._dict[language] = {\n      ...langDict,\n      ...vocabularies\n    };\n  }\n  /**\n   * @method\n   * Add vocabularies for one language\n   * @param {Object} vocabularies - Object that has language as key,\n   *                                vocabularies of each language as value\n   */\n  putVocabularies(vocabularies) {\n    Object.keys(vocabularies).forEach(key => {\n      this.putVocabulariesForLanguage(key, vocabularies[key]);\n    });\n  }\n};\nexport { I18n$1 as I18n };\n//# sourceMappingURL=I18n.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}