{"ast":null,"code":"import { AWS_CLOUDWATCH_CATEGORY } from '../constants.mjs';\nimport { LogType } from './types.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst LOG_LEVELS = {\n  VERBOSE: 1,\n  DEBUG: 2,\n  INFO: 3,\n  WARN: 4,\n  ERROR: 5,\n  NONE: 6\n};\n/**\n * Write logs\n * @class Logger\n */\nlet ConsoleLogger = /*#__PURE__*/(() => {\n  class ConsoleLogger {\n    /**\n     * @constructor\n     * @param {string} name - Name of the logger\n     */\n    constructor(name, level = LogType.WARN) {\n      this.name = name;\n      this.level = level;\n      this._pluggables = [];\n    }\n    _padding(n) {\n      return n < 10 ? '0' + n : '' + n;\n    }\n    _ts() {\n      const dt = new Date();\n      return [this._padding(dt.getMinutes()), this._padding(dt.getSeconds())].join(':') + '.' + dt.getMilliseconds();\n    }\n    configure(config) {\n      if (!config) return this._config;\n      this._config = config;\n      return this._config;\n    }\n    /**\n     * Write log\n     * @method\n     * @memeberof Logger\n     * @param {LogType|string} type - log type, default INFO\n     * @param {string|object} msg - Logging message or object\n     */\n    _log(type, ...msg) {\n      let loggerLevelName = this.level;\n      if (ConsoleLogger.LOG_LEVEL) {\n        loggerLevelName = ConsoleLogger.LOG_LEVEL;\n      }\n      if (typeof window !== 'undefined' && window.LOG_LEVEL) {\n        loggerLevelName = window.LOG_LEVEL;\n      }\n      const loggerLevel = LOG_LEVELS[loggerLevelName];\n      const typeLevel = LOG_LEVELS[type];\n      if (!(typeLevel >= loggerLevel)) {\n        // Do nothing if type is not greater than or equal to logger level (handle undefined)\n        return;\n      }\n      let log = console.log.bind(console);\n      if (type === LogType.ERROR && console.error) {\n        log = console.error.bind(console);\n      }\n      if (type === LogType.WARN && console.warn) {\n        log = console.warn.bind(console);\n      }\n      const prefix = `[${type}] ${this._ts()} ${this.name}`;\n      let message = '';\n      if (msg.length === 1 && typeof msg[0] === 'string') {\n        message = `${prefix} - ${msg[0]}`;\n        log(message);\n      } else if (msg.length === 1) {\n        message = `${prefix} ${msg[0]}`;\n        log(prefix, msg[0]);\n      } else if (typeof msg[0] === 'string') {\n        let obj = msg.slice(1);\n        if (obj.length === 1) {\n          obj = obj[0];\n        }\n        message = `${prefix} - ${msg[0]} ${obj}`;\n        log(`${prefix} - ${msg[0]}`, obj);\n      } else {\n        message = `${prefix} ${msg}`;\n        log(prefix, msg);\n      }\n      for (const plugin of this._pluggables) {\n        const logEvent = {\n          message,\n          timestamp: Date.now()\n        };\n        plugin.pushLogs([logEvent]);\n      }\n    }\n    /**\n     * Write General log. Default to INFO\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    log(...msg) {\n      this._log(LogType.INFO, ...msg);\n    }\n    /**\n     * Write INFO log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    info(...msg) {\n      this._log(LogType.INFO, ...msg);\n    }\n    /**\n     * Write WARN log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    warn(...msg) {\n      this._log(LogType.WARN, ...msg);\n    }\n    /**\n     * Write ERROR log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    error(...msg) {\n      this._log(LogType.ERROR, ...msg);\n    }\n    /**\n     * Write DEBUG log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    debug(...msg) {\n      this._log(LogType.DEBUG, ...msg);\n    }\n    /**\n     * Write VERBOSE log\n     * @method\n     * @memeberof Logger\n     * @param {string|object} msg - Logging message or object\n     */\n    verbose(...msg) {\n      this._log(LogType.VERBOSE, ...msg);\n    }\n    addPluggable(pluggable) {\n      if (pluggable && pluggable.getCategoryName() === AWS_CLOUDWATCH_CATEGORY) {\n        this._pluggables.push(pluggable);\n        pluggable.configure(this._config);\n      }\n    }\n    listPluggables() {\n      return this._pluggables;\n    }\n  }\n  ConsoleLogger.LOG_LEVEL = null;\n  return ConsoleLogger;\n})();\nexport { ConsoleLogger };\n//# sourceMappingURL=ConsoleLogger.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}