{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TranslateService } from '@ngx-translate/core';\nimport { AirtableService } from 'environments/airtable/airtable.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"environments/airtable/airtable.service\";\nimport * as i2 from \"@ngx-translate/core\";\nexport let DashboardService = /*#__PURE__*/(() => {\n  class DashboardService {\n    airtableService;\n    translate;\n    records = [];\n    selectedLanguage = 'en';\n    labels = [];\n    label = null;\n    constructor(airtableService, translate) {\n      this.airtableService = airtableService;\n      this.translate = translate;\n    }\n    updateLabels() {\n      this.label = this.translate.instant('Number of Reviews');\n      this.labels = this.translate.instant(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n    }\n    getChartData(ctx) {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.records = yield _this.airtableService.getRecords();\n        return _this.generateChartData(ctx);\n      })();\n    }\n    generateChartData(ctx) {\n      const chartColor = \"#FFFFFF\";\n      var gradientStroke = ctx.createLinearGradient(0, 20, 0, 300);\n      gradientStroke.addColorStop(0, '#6bd098');\n      gradientStroke.addColorStop(1, chartColor);\n      this.updateLabels();\n      const dataset = {\n        labels: Object.values(this.labels),\n        datasets: [{\n          label: this.label,\n          borderColor: '#6bd098',\n          backgroundColor: gradientStroke,\n          pointRadius: 5,\n          pointHoverRadius: 10,\n          fill: true,\n          borderWidth: 3,\n          data: this.countDatesForEachMonth()\n        }]\n      };\n      // Subscribe to language changes\n      this.translate.onLangChange.subscribe(() => {\n        ctx.labels = this.translate.instant(['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']);\n      });\n      return dataset;\n    }\n    //need to adjust it for the current year and to stop the line chart if the month did not start yet\n    countDatesForEachMonth() {\n      const currentYear = new Date().getFullYear();\n      // Filter records for the current year and only include months that have started in the current year\n      const filteredRecords = this.records.filter(user => {\n        const userDate = new Date(user.date);\n        return userDate.getFullYear() === currentYear;\n      });\n      // Count occurrences for each month using map and reduce\n      return filteredRecords.map(user => new Date(user.date).getMonth()).reduce((monthCounts, month) => {\n        monthCounts[month]++;\n        return monthCounts;\n      }, new Array(12).fill(0));\n    }\n    calculateAverageStars() {\n      const validRatings = this.records.map(user => user.rating).filter(stars => !isNaN(stars) || stars === 0);\n      const totalStars = validRatings.reduce((sum, stars) => sum + stars, 0);\n      const recordsCount = validRatings.length;\n      // Check if there are valid records to avoid division by zero\n      return Number(recordsCount > 0 ? totalStars / recordsCount : 0).toFixed(2);\n    }\n    counterStarsRating(nbstars) {\n      return this.records.map(user => user.rating).filter(rating => rating === nbstars).length;\n    }\n    numberOfComments() {\n      const currentYear = new Date().getFullYear();\n      // Use map to transform each record's date to the corresponding year\n      const years = this.records.map(user => new Date(user.date).getFullYear());\n      // Use reduce to count the occurrences of the current year\n      const numberOfComments = years.reduce((count, year) => {\n        return count + (year === currentYear ? 1 : 0);\n      }, 0);\n      return numberOfComments;\n    }\n    static ɵfac = function DashboardService_Factory(t) {\n      return new (t || DashboardService)(i0.ɵɵinject(i1.AirtableService), i0.ɵɵinject(i2.TranslateService));\n    };\n    static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: DashboardService,\n      factory: DashboardService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return DashboardService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}