{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { createMachine, sendUpdate } from 'xstate';\nimport { autoSignIn, fetchUserAttributes, resendSignUpCode, signInWithRedirect } from 'aws-amplify/auth';\nimport { getSignUpInput } from '../utils.mjs';\nimport { runValidators } from '../../../validators/index.mjs';\nimport ACTIONS from '../actions.mjs';\nimport GUARDS from '../guards.mjs';\nimport { getFederatedSignInState } from './utils.mjs';\nconst handleResetPasswordResponse = {\n  onDone: [{\n    actions: 'setCodeDeliveryDetails',\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: ['setRemoteError', 'sendUpdate']\n  }\n};\nconst handleAutoSignInResponse = {\n  onDone: [{\n    cond: 'hasCompletedSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.fetchUserAttributes'\n  }, {\n    cond: 'shouldConfirmSignInWithNewPassword',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resolved'\n  }, {\n    cond: 'shouldResetPasswordFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resetPassword'\n  }, {\n    cond: 'shouldConfirmSignUpFromSignIn',\n    actions: 'setNextSignInStep',\n    target: '#signUpActor.resendSignUpCode'\n  }, {\n    actions: ['setNextSignInStep', 'setChallengeName', 'setMissingAttributes', 'setTotpSecretCode'],\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: 'setRemoteError',\n    target: '#signUpActor.resolved'\n  }\n};\nconst handleFetchUserAttributesResponse = {\n  onDone: [{\n    cond: 'shouldVerifyAttribute',\n    actions: ['setShouldVerifyUserAttributeStep', 'setUnverifiedUserAttributes'],\n    target: '#signUpActor.resolved'\n  }, {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signUpActor.resolved'\n  }],\n  onError: {\n    actions: 'setConfirmAttributeCompleteStep',\n    target: '#signUpActor.resolved'\n  }\n};\nfunction signUpActor({\n  services\n}) {\n  return createMachine({\n    id: 'signUpActor',\n    initial: 'init',\n    predictableActionArguments: true,\n    states: {\n      init: {\n        always: [{\n          cond: 'shouldConfirmSignUp',\n          target: 'confirmSignUp'\n        }, {\n          target: 'signUp'\n        }]\n      },\n      autoSignIn: {\n        tags: 'pending',\n        invoke: {\n          src: 'autoSignIn',\n          ...handleAutoSignInResponse\n        }\n      },\n      fetchUserAttributes: {\n        invoke: {\n          src: 'fetchUserAttributes',\n          ...handleFetchUserAttributesResponse\n        }\n      },\n      federatedSignIn: getFederatedSignInState('signUp'),\n      resetPassword: {\n        invoke: {\n          src: 'resetPassword',\n          ...handleResetPasswordResponse\n        }\n      },\n      resendSignUpCode: {\n        tags: 'pending',\n        entry: 'sendUpdate',\n        exit: 'sendUpdate',\n        invoke: {\n          src: 'resendSignUpCode',\n          onDone: {\n            actions: ['setCodeDeliveryDetails', 'sendUpdate'],\n            target: '#signUpActor.confirmSignUp'\n          },\n          onError: [{\n            cond: 'isUserAlreadyConfirmed',\n            target: '#signUpActor.resolved'\n          }, {\n            actions: ['setRemoteError', 'sendUpdate']\n          }]\n        }\n      },\n      signUp: {\n        type: 'parallel',\n        exit: 'clearTouched',\n        on: {\n          FEDERATED_SIGN_IN: {\n            target: 'federatedSignIn'\n          }\n        },\n        states: {\n          validation: {\n            initial: 'pending',\n            states: {\n              pending: {\n                invoke: {\n                  src: 'validateSignUp',\n                  onDone: {\n                    actions: 'clearValidationError',\n                    target: 'valid'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'invalid'\n                  }\n                }\n              },\n              valid: {\n                entry: 'sendUpdate'\n              },\n              invalid: {\n                entry: 'sendUpdate'\n              }\n            },\n            on: {\n              BLUR: {\n                actions: 'handleBlur',\n                target: '.pending'\n              },\n              CHANGE: {\n                actions: 'handleInput',\n                target: '.pending'\n              }\n            }\n          },\n          submission: {\n            initial: 'idle',\n            states: {\n              idle: {\n                entry: ['sendUpdate'],\n                on: {\n                  SUBMIT: {\n                    actions: 'handleSubmit',\n                    target: 'validate'\n                  }\n                }\n              },\n              validate: {\n                entry: 'sendUpdate',\n                invoke: {\n                  src: 'validateSignUp',\n                  onDone: {\n                    target: 'handleSignUp',\n                    actions: 'clearValidationError'\n                  },\n                  onError: {\n                    actions: 'setFieldErrors',\n                    target: 'idle'\n                  }\n                }\n              },\n              handleSignUp: {\n                tags: 'pending',\n                entry: ['setUsernameSignUp', 'clearError'],\n                exit: 'sendUpdate',\n                invoke: {\n                  src: 'handleSignUp',\n                  onDone: [{\n                    cond: 'hasCompletedSignUp',\n                    actions: 'setNextSignUpStep',\n                    target: '#signUpActor.resolved'\n                  }, {\n                    cond: 'shouldAutoSignIn',\n                    actions: 'setNextSignUpStep',\n                    target: '#signUpActor.autoSignIn'\n                  }, {\n                    actions: ['setCodeDeliveryDetails', 'setNextSignUpStep'],\n                    target: '#signUpActor.init'\n                  }],\n                  onError: {\n                    actions: ['sendUpdate', 'setRemoteError'],\n                    target: 'idle'\n                  }\n                }\n              }\n            }\n          }\n        }\n      },\n      confirmSignUp: {\n        initial: 'edit',\n        entry: 'sendUpdate',\n        states: {\n          edit: {\n            on: {\n              SUBMIT: {\n                actions: 'handleSubmit',\n                target: 'submit'\n              },\n              CHANGE: {\n                actions: 'handleInput'\n              },\n              BLUR: {\n                actions: 'handleBlur'\n              },\n              RESEND: '#signUpActor.resendSignUpCode'\n            }\n          },\n          submit: {\n            tags: 'pending',\n            entry: ['clearError', 'sendUpdate'],\n            invoke: {\n              src: 'confirmSignUp',\n              onDone: [{\n                cond: 'shouldAutoSignIn',\n                actions: ['setNextSignUpStep', 'clearFormValues'],\n                target: '#signUpActor.autoSignIn'\n              }, {\n                actions: 'setNextSignUpStep',\n                target: '#signUpActor.init'\n              }],\n              onError: {\n                actions: ['setRemoteError', 'sendUpdate'],\n                target: 'edit'\n              }\n            }\n          }\n        }\n      },\n      resolved: {\n        type: 'final',\n        data: context => ({\n          challengeName: context.challengeName,\n          missingAttributes: context.missingAttributes,\n          remoteError: context.remoteError,\n          step: context.step,\n          totpSecretCode: context.totpSecretCode,\n          username: context.username,\n          unverifiedUserAttributes: context.unverifiedUserAttributes\n        })\n      }\n    }\n  }, {\n    // sendUpdate is a HOC\n    actions: {\n      ...ACTIONS,\n      sendUpdate: sendUpdate()\n    },\n    guards: GUARDS,\n    services: {\n      autoSignIn() {\n        return autoSignIn();\n      },\n      fetchUserAttributes() {\n        return _asyncToGenerator(function* () {\n          return fetchUserAttributes();\n        })();\n      },\n      confirmSignUp({\n        formValues,\n        username\n      }) {\n        const {\n          confirmation_code: confirmationCode\n        } = formValues;\n        const input = {\n          username,\n          confirmationCode\n        };\n        return services.handleConfirmSignUp(input);\n      },\n      resendSignUpCode({\n        username\n      }) {\n        return resendSignUpCode({\n          username\n        });\n      },\n      signInWithRedirect(_, {\n        data\n      }) {\n        return signInWithRedirect(data);\n      },\n      handleSignUp(context) {\n        const {\n          formValues,\n          loginMechanisms,\n          username\n        } = context;\n        const loginMechanism = loginMechanisms[0];\n        const input = getSignUpInput(username, formValues, loginMechanism);\n        return services.handleSignUp(input);\n      },\n      validateSignUp(context) {\n        return _asyncToGenerator(function* () {\n          // This needs to exist in the machine to reference new `services`\n          return runValidators(context.formValues, context.touched, context.passwordSettings, [\n          // Validation of password\n          services.validateFormPassword,\n          // Validation for default form fields\n          services.validateConfirmPassword, services.validatePreferredUsername,\n          // Validation for any custom Sign Up fields\n          services.validateCustomSignUp]);\n        })();\n      }\n    }\n  });\n}\nexport { signUpActor };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}