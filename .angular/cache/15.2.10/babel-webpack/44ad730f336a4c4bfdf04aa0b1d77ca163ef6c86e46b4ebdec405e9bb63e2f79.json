{"ast":null,"code":"import { Sha256 } from '@aws-crypto/sha256-js';\nimport { base64Encoder, base64Decoder } from '@aws-amplify/core/internals/utils';\nimport { textEncoder } from '../textEncoder/index.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst getSignatureString = ({\n  userPoolName,\n  username,\n  challengeParameters,\n  dateNow,\n  hkdf\n}) => {\n  const bufUPIDaToB = textEncoder.convert(userPoolName);\n  const bufUNaToB = textEncoder.convert(username);\n  const bufSBaToB = urlB64ToUint8Array(challengeParameters.SECRET_BLOCK);\n  const bufDNaToB = textEncoder.convert(dateNow);\n  const bufConcat = new Uint8Array(bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength + bufDNaToB.byteLength);\n  bufConcat.set(bufUPIDaToB, 0);\n  bufConcat.set(bufUNaToB, bufUPIDaToB.byteLength);\n  bufConcat.set(bufSBaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength);\n  bufConcat.set(bufDNaToB, bufUPIDaToB.byteLength + bufUNaToB.byteLength + bufSBaToB.byteLength);\n  const awsCryptoHash = new Sha256(hkdf);\n  awsCryptoHash.update(bufConcat);\n  const resultFromAWSCrypto = awsCryptoHash.digestSync();\n  const signatureString = base64Encoder.convert(resultFromAWSCrypto);\n  return signatureString;\n};\nconst urlB64ToUint8Array = base64String => {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding).replace(/-/g, '+').replace(/_/g, '/');\n  const rawData = base64Decoder.convert(base64);\n  const outputArray = new Uint8Array(rawData.length);\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n};\nexport { getSignatureString };\n//# sourceMappingURL=getSignatureString.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}