{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction isTokenExpired({\n  expiresAt,\n  clockDrift\n}) {\n  const currentTime = Date.now();\n  return currentTime + clockDrift > expiresAt;\n}\nclass AuthClass {\n  /**\n   * Configure Auth category\n   *\n   * @internal\n   *\n   * @param authResourcesConfig - Resources configurations required by Auth providers.\n   * @param authOptions - Client options used by library\n   *\n   * @returns void\n   */\n  configure(authResourcesConfig, authOptions) {\n    this.authConfig = authResourcesConfig;\n    this.authOptions = authOptions;\n  }\n  /**\n   * Fetch the auth tokens, and the temporary AWS credentials and identity if they are configured. By default it\n   * does not refresh the auth tokens or credentials if they are loaded in storage already. You can force a refresh\n   * with `{ forceRefresh: true }` input.\n   *\n   * @param options - Options configuring the fetch behavior.\n   *\n   * @returns Promise of current auth session {@link AuthSession}.\n   */\n  fetchAuthSession(options = {}) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let credentialsAndIdentityId;\n      let userSub;\n      // Get tokens will throw if session cannot be refreshed (network or service error) or return null if not available\n      const tokens = yield _this.getTokens(options);\n      if (tokens) {\n        userSub = tokens.accessToken?.payload?.sub;\n        // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n        credentialsAndIdentityId = yield _this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n          authConfig: _this.authConfig,\n          tokens,\n          authenticated: true,\n          forceRefresh: options.forceRefresh\n        });\n      } else {\n        // getCredentialsAndIdentityId will throw if cannot get credentials (network or service error)\n        credentialsAndIdentityId = yield _this.authOptions?.credentialsProvider?.getCredentialsAndIdentityId({\n          authConfig: _this.authConfig,\n          authenticated: false,\n          forceRefresh: options.forceRefresh\n        });\n      }\n      return {\n        tokens,\n        credentials: credentialsAndIdentityId?.credentials,\n        identityId: credentialsAndIdentityId?.identityId,\n        userSub\n      };\n    })();\n  }\n  clearCredentials() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      yield _this2.authOptions?.credentialsProvider?.clearCredentialsAndIdentityId();\n    })();\n  }\n  getTokens(options) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return (yield _this3.authOptions?.tokenProvider?.getTokens(options)) ?? undefined;\n    })();\n  }\n}\nexport { AuthClass, isTokenExpired };\n//# sourceMappingURL=index.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}