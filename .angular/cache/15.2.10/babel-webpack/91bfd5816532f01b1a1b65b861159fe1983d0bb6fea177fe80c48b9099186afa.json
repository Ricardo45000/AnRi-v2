{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { verifySoftwareToken } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Verifies an OTP code retrieved from an associated authentication app.\n *\n * @param input - The VerifyTOTPSetupInput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `code` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction verifyTOTPSetup(_x) {\n  return _verifyTOTPSetup.apply(this, arguments);\n}\nfunction _verifyTOTPSetup() {\n  _verifyTOTPSetup = _asyncToGenerator(function* (input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      code,\n      options\n    } = input;\n    assertValidationError(!!code, AuthValidationErrorCode.EmptyVerifyTOTPSetupCode);\n    const {\n      tokens\n    } = yield fetchAuthSession({\n      forceRefresh: false\n    });\n    assertAuthTokens(tokens);\n    yield verifySoftwareToken({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.VerifyTOTPSetup)\n    }, {\n      AccessToken: tokens.accessToken.toString(),\n      UserCode: code,\n      FriendlyDeviceName: options?.friendlyDeviceName\n    });\n  });\n  return _verifyTOTPSetup.apply(this, arguments);\n}\nexport { verifyTOTPSetup };\n//# sourceMappingURL=verifyTOTPSetup.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}