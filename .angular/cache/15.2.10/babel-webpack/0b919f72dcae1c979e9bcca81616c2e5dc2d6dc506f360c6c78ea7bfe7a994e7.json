{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from 'aws-amplify';\nimport { getCurrentUser, signIn, signUp, confirmSignIn, confirmSignUp, confirmResetPassword, resetPassword } from 'aws-amplify/auth';\nimport 'aws-amplify/utils';\nimport '@aws-amplify/core/internals/utils';\nimport '../../utils/setUserAgent/constants.mjs';\nimport '../../types/authenticator/user.mjs';\nimport '../../types/authenticator/attributes.mjs';\nimport { hasSpecialChars } from '../../helpers/authenticator/utils.mjs';\nimport '../../helpers/accountSettings/utils.mjs';\n\n// Cognito does not allow a password length less then 8 characters\nconst DEFAULT_COGNITO_PASSWORD_MIN_LENGTH = 8;\nconst isInvalidUserAtributes = userAttributes => Array.isArray(userAttributes);\nconst parseUserAttributes = userAttributes => {\n  if (!userAttributes) {\n    return undefined;\n  }\n  // `aws-amplify` versions <= 6.0.5 return an array of `userAttributes` rather than an object\n  if (isInvalidUserAtributes(userAttributes)) {\n    return Object.entries(userAttributes).map(([_, value]) => Object.keys(value)[0]);\n  }\n  return Object.keys(userAttributes);\n};\nconst defaultServices = {\n  getAmplifyConfig() {\n    return _asyncToGenerator(function* () {\n      const result = Amplify.getConfig();\n      const cliConfig = result.Auth?.Cognito;\n      const {\n        loginWith,\n        userAttributes\n      } = result.Auth?.Cognito ?? {};\n      const parsedLoginMechanisms = loginWith ? Object.entries(loginWith).filter(([key, _value]) => key !== 'oauth').filter(([_key, value]) => !!value).map(keyValueArray => {\n        return keyValueArray[0] === 'phone' // the key for phone_number is phone in getConfig but everywhere else we treat is as phone_number\n        ? 'phone_number' : keyValueArray[0];\n      }) : undefined;\n      const parsedSignupAttributes = parseUserAttributes(userAttributes);\n      const parsedSocialProviders = loginWith?.oauth?.providers ? loginWith.oauth.providers?.map(provider => provider.toString().toLowerCase()) : undefined;\n      return {\n        ...cliConfig,\n        loginMechanisms: parsedLoginMechanisms,\n        signUpAttributes: parsedSignupAttributes,\n        socialProviders: parsedSocialProviders\n      };\n    })();\n  },\n  getCurrentUser,\n  handleSignIn: signIn,\n  handleSignUp: signUp,\n  handleConfirmSignIn: confirmSignIn,\n  handleConfirmSignUp: confirmSignUp,\n  handleForgotPasswordSubmit: confirmResetPassword,\n  handleForgotPassword: resetPassword,\n  // Validation hooks for overriding\n  validateCustomSignUp(formData, touchData) {\n    return _asyncToGenerator(function* () {})();\n  },\n  validateFormPassword(formData, touchData, passwordSettings) {\n    return _asyncToGenerator(function* () {\n      const {\n        password\n      } = formData;\n      const {\n        password: touched_password\n      } = touchData;\n      /**\n       * If the password is not touched,\n       * or if the password settings are not set, we don't need to validate it.\n       */\n      if (!touched_password || !passwordSettings) return null;\n      const password_complexity = [];\n      const policyMinLength = passwordSettings.minLength ?? DEFAULT_COGNITO_PASSWORD_MIN_LENGTH;\n      if (password.length < policyMinLength) {\n        password_complexity.push(`Password must have at least ${policyMinLength} characters`);\n      }\n      if (passwordSettings.requireLowercase && !/[a-z]/.test(password)) password_complexity.push('Password must have lower case letters');\n      if (passwordSettings.requireUppercase && !/[A-Z]/.test(password)) password_complexity.push('Password must have upper case letters');\n      if (passwordSettings.requireNumbers && !/[0-9]/.test(password)) password_complexity.push('Password must have numbers');\n      // https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-policies.html\n      if (passwordSettings.requireSpecialCharacters && !hasSpecialChars(password)) password_complexity.push('Password must have special characters');\n      /**\n       * Only return an error if there is at least one error.\n       */\n      return password_complexity.length !== 0 ? {\n        password: password_complexity\n      } : null;\n    })();\n  },\n  validateConfirmPassword(formData, touchData) {\n    return _asyncToGenerator(function* () {\n      const {\n        password,\n        confirm_password\n      } = formData;\n      const {\n        confirm_password: touched_confirm_password,\n        password: touched_password\n      } = touchData;\n      if (!password && !confirm_password) {\n        // these inputs are clean, don't complain yet\n        return null;\n      } else if ((password || confirm_password) && password !== confirm_password && (touched_confirm_password && touched_password || password?.length >= 6 && confirm_password?.length >= 6)) {\n        // Only return an error if both fields have text entered,\n        // the passwords do not match, and the fields have been\n        // touched or the password and confirm password is longer then or equal to 6.\n        return {\n          confirm_password: 'Your passwords must match'\n        };\n      }\n    })();\n  },\n  validatePreferredUsername(formData, touchData) {\n    return _asyncToGenerator(function* () {})();\n  }\n};\nexport { defaultServices };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}