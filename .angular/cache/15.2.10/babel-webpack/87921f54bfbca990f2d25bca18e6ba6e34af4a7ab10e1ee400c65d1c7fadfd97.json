{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, urlSafeEncode, AuthAction } from '@aws-amplify/core/internals/utils';\nimport '../utils/oauth/enableOAuthListener.mjs';\nimport { cognitoHostedUIIdentityProviderMap } from '../types/models.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { openAuthSession } from '../../../utils/openAuthSession.mjs';\nimport { assertUserNotAuthenticated } from '../utils/signInHelpers.mjs';\nimport { generateCodeVerifier } from '../utils/oauth/generateCodeVerifier.mjs';\nimport { generateState } from '../utils/oauth/generateState.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport '../tokenProvider/tokenProvider.mjs';\nimport { getRedirectUrl } from '../utils/oauth/getRedirectUrl.mjs';\nimport { handleFailure } from '../utils/oauth/handleFailure.mjs';\nimport { completeOAuthFlow } from '../utils/oauth/completeOAuthFlow.mjs';\nimport { oAuthStore } from '../utils/oauth/oAuthStore.mjs';\nimport { createOAuthError } from '../utils/oauth/createOAuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Signs in a user with OAuth. Redirects the application to an Identity Provider.\n *\n * @param input - The SignInWithRedirectInput object, if empty it will redirect to Cognito HostedUI\n *\n * @throws AuthTokenConfigException - Thrown when the user pool config is invalid.\n * @throws OAuthNotConfigureException - Thrown when the oauth config is invalid.\n */\nfunction signInWithRedirect(_x) {\n  return _signInWithRedirect.apply(this, arguments);\n}\nfunction _signInWithRedirect() {\n  _signInWithRedirect = _asyncToGenerator(function* (input) {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    assertOAuthConfig(authConfig);\n    oAuthStore.setAuthConfig(authConfig);\n    yield assertUserNotAuthenticated();\n    let provider = 'COGNITO'; // Default\n    if (typeof input?.provider === 'string') {\n      provider = cognitoHostedUIIdentityProviderMap[input.provider];\n    } else if (input?.provider?.custom) {\n      provider = input.provider.custom;\n    }\n    return oauthSignIn({\n      oauthConfig: authConfig.loginWith.oauth,\n      clientId: authConfig.userPoolClientId,\n      provider,\n      customState: input?.customState,\n      preferPrivateSession: input?.options?.preferPrivateSession\n    });\n  });\n  return _signInWithRedirect.apply(this, arguments);\n}\nconst oauthSignIn = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* ({\n    oauthConfig,\n    provider,\n    clientId,\n    customState,\n    preferPrivateSession\n  }) {\n    const {\n      domain,\n      redirectSignIn,\n      responseType,\n      scopes\n    } = oauthConfig;\n    const randomState = generateState();\n    /* encodeURIComponent is not URL safe, use urlSafeEncode instead. Cognito\n    single-encodes/decodes url on first sign in and double-encodes/decodes url\n    when user already signed in. Using encodeURIComponent, Base32, Base64 add\n    characters % or = which on further encoding becomes unsafe. '=' create issue\n    for parsing query params.\n    Refer: https://github.com/aws-amplify/amplify-js/issues/5218 */\n    const state = customState ? `${randomState}-${urlSafeEncode(customState)}` : randomState;\n    const {\n      value,\n      method,\n      toCodeChallenge\n    } = generateCodeVerifier(128);\n    const redirectUri = getRedirectUrl(oauthConfig.redirectSignIn);\n    oAuthStore.storeOAuthInFlight(true);\n    oAuthStore.storeOAuthState(state);\n    oAuthStore.storePKCE(value);\n    const queryString = Object.entries({\n      redirect_uri: redirectUri,\n      response_type: responseType,\n      client_id: clientId,\n      identity_provider: provider,\n      scope: scopes.join(' '),\n      state,\n      ...(responseType === 'code' && {\n        code_challenge: toCodeChallenge(),\n        code_challenge_method: method\n      })\n    }).map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`).join('&');\n    // TODO(v6): use URL object instead\n    const oAuthUrl = `https://${domain}/oauth2/authorize?${queryString}`;\n    // the following is effective only in react-native as openAuthSession resolves only in react-native\n    const {\n      type,\n      error,\n      url\n    } = (yield openAuthSession(oAuthUrl)) ?? {};\n    try {\n      if (type === 'error') {\n        throw createOAuthError(String(error));\n      }\n      if (type === 'success' && url) {\n        yield completeOAuthFlow({\n          currentUrl: url,\n          clientId,\n          domain,\n          redirectUri,\n          responseType,\n          userAgentValue: getAuthUserAgentValue(AuthAction.SignInWithRedirect),\n          preferPrivateSession\n        });\n      }\n    } catch (err) {\n      yield handleFailure(err);\n      // rethrow the error so it can be caught by `await signInWithRedirect()` in react-native\n      throw err;\n    }\n  });\n  return function oauthSignIn(_x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport { signInWithRedirect };\n//# sourceMappingURL=signInWithRedirect.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}