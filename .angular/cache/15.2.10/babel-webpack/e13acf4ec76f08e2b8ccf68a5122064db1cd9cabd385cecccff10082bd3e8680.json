{"ast":null,"code":"import { EMPTY_HASH, UNSIGNED_PAYLOAD } from '../constants.mjs';\nimport { getHashedDataAsHex } from './dataHashHelpers.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Returns the hashed payload.\n *\n * @param body `body` (payload) from the request.\n * @returns String created using the payload in the body of the HTTP request as input to a hash function. This string\n * uses lowercase hexadecimal characters. If the payload is empty, return precalculated result of an empty hash.\n *\n * @internal\n */\nconst getHashedPayload = body => {\n  // return precalculated empty hash if body is undefined or null\n  if (body == null) {\n    return EMPTY_HASH;\n  }\n  if (isSourceData(body)) {\n    const hashedData = getHashedDataAsHex(null, body);\n    return hashedData;\n  }\n  // Defined body is not signable. Return unsigned payload which may or may not be accepted by the service.\n  return UNSIGNED_PAYLOAD;\n};\nconst isSourceData = body => typeof body === 'string' || ArrayBuffer.isView(body) || isArrayBuffer(body);\nconst isArrayBuffer = arg => typeof ArrayBuffer === 'function' && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === '[object ArrayBuffer]';\nexport { getHashedPayload };\n//# sourceMappingURL=getHashedPayload.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}