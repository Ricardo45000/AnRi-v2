{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { forgotPassword } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Resets a user's password.\n *\n * @param input -  The ResetPasswordInput object.\n * @returns ResetPasswordOutput\n * @throws -{@link ForgotPasswordException }\n * Thrown due to an invalid confirmation code or password.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty username.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nfunction resetPassword(_x) {\n  return _resetPassword.apply(this, arguments);\n}\nfunction _resetPassword() {\n  _resetPassword = _asyncToGenerator(function* (input) {\n    const {\n      username\n    } = input;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyResetPasswordUsername);\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      userPoolClientId,\n      userPoolId\n    } = authConfig;\n    const clientMetadata = input.options?.clientMetadata;\n    const UserContextData = getUserContextData({\n      username,\n      userPoolId,\n      userPoolClientId\n    });\n    const res = yield forgotPassword({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.ResetPassword)\n    }, {\n      Username: username,\n      ClientMetadata: clientMetadata,\n      ClientId: authConfig.userPoolClientId,\n      UserContextData\n    });\n    const codeDeliveryDetails = res.CodeDeliveryDetails;\n    return {\n      isPasswordReset: false,\n      nextStep: {\n        resetPasswordStep: 'CONFIRM_RESET_PASSWORD_WITH_CODE',\n        codeDeliveryDetails: {\n          deliveryMedium: codeDeliveryDetails?.DeliveryMedium,\n          destination: codeDeliveryDetails?.Destination,\n          attributeName: codeDeliveryDetails?.AttributeName\n        }\n      }\n    };\n  });\n  return _resetPassword.apply(this, arguments);\n}\nexport { resetPassword };\n//# sourceMappingURL=resetPassword.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}