{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { parseMetadata } from './responseInfo.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Utility functions for serializing and deserializing of JSON protocol in general(including: REST-JSON, JSON-RPC, etc.)\n */\n/**\n * Error parser for AWS JSON protocol.\n */\nconst parseJsonError = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator(function* (response) {\n    if (!response || response.statusCode < 300) {\n      return;\n    }\n    const body = yield parseJsonBody(response);\n    const sanitizeErrorCode = rawValue => {\n      const [cleanValue] = rawValue.toString().split(/[,:]+/);\n      if (cleanValue.includes('#')) {\n        return cleanValue.split('#')[1];\n      }\n      return cleanValue;\n    };\n    const code = sanitizeErrorCode(response.headers['x-amzn-errortype'] ?? body.code ?? body.__type ?? 'UnknownError');\n    const message = body.message ?? body.Message ?? 'Unknown error';\n    const error = new Error(message);\n    return Object.assign(error, {\n      name: code,\n      $metadata: parseMetadata(response)\n    });\n  });\n  return function parseJsonError(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Parse JSON response body to JavaScript object.\n */\nconst parseJsonBody = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator(function* (response) {\n    if (!response.body) {\n      throw new Error('Missing response payload');\n    }\n    const output = yield response.body.json();\n    return Object.assign(output, {\n      $metadata: parseMetadata(response)\n    });\n  });\n  return function parseJsonBody(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport { parseJsonBody, parseJsonError };\n//# sourceMappingURL=json.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}