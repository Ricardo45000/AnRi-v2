{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { ConsoleLogger, Amplify, clearCredentials, Hub, defaultStorage } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, assertOAuthConfig, AMPLIFY_SYMBOL, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { revokeToken, globalSignOut as globalSignOut$1 } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokensWithRefreshToken, assertAuthTokens } from '../utils/types.mjs';\nimport '@aws-crypto/sha256-js';\nimport { handleOAuthSignOut } from '../utils/oauth/handleOAuthSignOut.mjs';\nimport { OAUTH_SIGNOUT_EXCEPTION } from '../../../errors/constants.mjs';\nimport { DefaultOAuthStore } from '../utils/signInWithRedirectStore.mjs';\nimport '../../../Errors.mjs';\nimport '../../../common/AuthErrorStrings.mjs';\nimport '../../../types/Auth.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst logger = new ConsoleLogger('Auth');\n/**\n * Signs a user out\n *\n * @param input - The SignOutInput object\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction signOut(_x) {\n  return _signOut.apply(this, arguments);\n}\nfunction _signOut() {\n  _signOut = _asyncToGenerator(function* (input) {\n    const cognitoConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(cognitoConfig);\n    if (input?.global) {\n      yield globalSignOut(cognitoConfig);\n    } else {\n      yield clientSignOut(cognitoConfig);\n    }\n    let hasOAuthConfig;\n    try {\n      assertOAuthConfig(cognitoConfig);\n      hasOAuthConfig = true;\n    } catch (err) {\n      hasOAuthConfig = false;\n    }\n    if (hasOAuthConfig) {\n      const oAuthStore = new DefaultOAuthStore(defaultStorage);\n      oAuthStore.setAuthConfig(cognitoConfig);\n      const {\n        type\n      } = (yield handleOAuthSignOut(cognitoConfig, oAuthStore)) ?? {};\n      if (type === 'error') {\n        throw new AuthError({\n          name: OAUTH_SIGNOUT_EXCEPTION,\n          message: 'An error occurred when attempting to log out from OAuth provider.'\n        });\n      }\n    } else {\n      // complete sign out\n      tokenOrchestrator.clearTokens();\n      yield clearCredentials();\n      Hub.dispatch('auth', {\n        event: 'signedOut'\n      }, 'Auth', AMPLIFY_SYMBOL);\n    }\n  });\n  return _signOut.apply(this, arguments);\n}\nfunction clientSignOut(_x2) {\n  return _clientSignOut.apply(this, arguments);\n}\nfunction _clientSignOut() {\n  _clientSignOut = _asyncToGenerator(function* (cognitoConfig) {\n    try {\n      const authTokens = yield tokenOrchestrator.getTokenStore().loadTokens();\n      assertAuthTokensWithRefreshToken(authTokens);\n      if (isSessionRevocable(authTokens.accessToken)) {\n        yield revokeToken({\n          region: getRegion(cognitoConfig.userPoolId),\n          userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n        }, {\n          ClientId: cognitoConfig.userPoolClientId,\n          Token: authTokens.refreshToken\n        });\n      }\n    } catch (err) {\n      // this shouldn't throw\n      logger.debug('Client signOut error caught but will proceed with token removal');\n    }\n  });\n  return _clientSignOut.apply(this, arguments);\n}\nfunction globalSignOut(_x3) {\n  return _globalSignOut.apply(this, arguments);\n}\nfunction _globalSignOut() {\n  _globalSignOut = _asyncToGenerator(function* (cognitoConfig) {\n    try {\n      const authTokens = yield tokenOrchestrator.getTokenStore().loadTokens();\n      assertAuthTokens(authTokens);\n      yield globalSignOut$1({\n        region: getRegion(cognitoConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.SignOut)\n      }, {\n        AccessToken: authTokens.accessToken.toString()\n      });\n    } catch (err) {\n      // it should not throw\n      logger.debug('Global signOut error caught but will proceed with token removal');\n    }\n  });\n  return _globalSignOut.apply(this, arguments);\n}\nconst isSessionRevocable = token => !!token?.payload?.origin_jti;\nexport { signOut };\n//# sourceMappingURL=signOut.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}