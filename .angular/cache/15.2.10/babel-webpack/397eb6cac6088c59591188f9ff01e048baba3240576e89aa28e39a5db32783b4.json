{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Hub } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, isTokenExpired, AMPLIFY_SYMBOL } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nclass TokenOrchestrator {\n  constructor() {\n    this.waitForInflightOAuth = /*#__PURE__*/_asyncToGenerator(function* () {\n      // no-op\n    });\n  }\n  setAuthConfig(authConfig) {\n    this.authConfig = authConfig;\n  }\n  setTokenRefresher(tokenRefresher) {\n    this.tokenRefresher = tokenRefresher;\n  }\n  setAuthTokenStore(tokenStore) {\n    this.tokenStore = tokenStore;\n  }\n  setWaitForInflightOAuth(waitForInflightOAuth) {\n    this.waitForInflightOAuth = waitForInflightOAuth;\n  }\n  getTokenStore() {\n    if (!this.tokenStore) {\n      throw new AuthError({\n        name: 'EmptyTokenStoreException',\n        message: 'TokenStore not set'\n      });\n    }\n    return this.tokenStore;\n  }\n  getTokenRefresher() {\n    if (!this.tokenRefresher) {\n      throw new AuthError({\n        name: 'EmptyTokenRefresherException',\n        message: 'TokenRefresher not set'\n      });\n    }\n    return this.tokenRefresher;\n  }\n  getTokens(options) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let tokens;\n      try {\n        assertTokenProviderConfig(_this.authConfig?.Cognito);\n      } catch (_err) {\n        // Token provider not configured\n        return null;\n      }\n      yield _this.waitForInflightOAuth();\n      tokens = yield _this.getTokenStore().loadTokens();\n      const username = yield _this.getTokenStore().getLastAuthUser();\n      if (tokens === null) {\n        return null;\n      }\n      const idTokenExpired = !!tokens?.idToken && isTokenExpired({\n        expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1000,\n        clockDrift: tokens.clockDrift ?? 0\n      });\n      const accessTokenExpired = isTokenExpired({\n        expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1000,\n        clockDrift: tokens.clockDrift ?? 0\n      });\n      if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {\n        tokens = yield _this.refreshTokens({\n          tokens,\n          username\n        });\n        if (tokens === null) {\n          return null;\n        }\n      }\n      return {\n        accessToken: tokens?.accessToken,\n        idToken: tokens?.idToken,\n        signInDetails: tokens?.signInDetails\n      };\n    })();\n  }\n  refreshTokens({\n    tokens,\n    username\n  }) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const newTokens = yield _this2.getTokenRefresher()({\n          tokens,\n          authConfig: _this2.authConfig,\n          username\n        });\n        yield _this2.setTokens({\n          tokens: newTokens\n        });\n        Hub.dispatch('auth', {\n          event: 'tokenRefresh'\n        }, 'Auth', AMPLIFY_SYMBOL);\n        return newTokens;\n      } catch (err) {\n        return _this2.handleErrors(err);\n      }\n    })();\n  }\n  handleErrors(err) {\n    assertServiceError(err);\n    if (err.message !== 'Network error') {\n      // TODO(v6): Check errors on client\n      this.clearTokens();\n    }\n    Hub.dispatch('auth', {\n      event: 'tokenRefresh_failure',\n      data: {\n        error: err\n      }\n    }, 'Auth', AMPLIFY_SYMBOL);\n    if (err.name.startsWith('NotAuthorizedException')) {\n      return null;\n    }\n    throw err;\n  }\n  setTokens({\n    tokens\n  }) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      return _this3.getTokenStore().storeTokens(tokens);\n    })();\n  }\n  clearTokens() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      return _this4.getTokenStore().clearTokens();\n    })();\n  }\n  getDeviceMetadata(username) {\n    return this.getTokenStore().getDeviceMetadata(username);\n  }\n  clearDeviceMetadata(username) {\n    return this.getTokenStore().clearDeviceMetadata(username);\n  }\n}\nexport { TokenOrchestrator };\n//# sourceMappingURL=TokenOrchestrator.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}