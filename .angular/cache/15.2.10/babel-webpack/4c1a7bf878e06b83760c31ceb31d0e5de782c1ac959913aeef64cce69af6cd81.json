{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { SETUP_TOTP_EXCEPTION } from '../types/errors.mjs';\nimport { getTOTPSetupDetails } from '../utils/signInHelpers.mjs';\nimport { associateSoftwareToken } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Sets up TOTP for the user.\n *\n * @returns SetUpTOTPOutput\n * @throws -{@link AssociateSoftwareTokenException}\n * Thrown if a service occurs while setting up TOTP.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n **/\nfunction setUpTOTP() {\n  return _setUpTOTP.apply(this, arguments);\n}\nfunction _setUpTOTP() {\n  _setUpTOTP = _asyncToGenerator(function* () {\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      tokens\n    } = yield fetchAuthSession({\n      forceRefresh: false\n    });\n    assertAuthTokens(tokens);\n    const username = tokens.idToken?.payload['cognito:username'] ?? '';\n    const {\n      SecretCode\n    } = yield associateSoftwareToken({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.SetUpTOTP)\n    }, {\n      AccessToken: tokens.accessToken.toString()\n    });\n    if (!SecretCode) {\n      // This should never happen.\n      throw new AuthError({\n        name: SETUP_TOTP_EXCEPTION,\n        message: 'Failed to set up TOTP.'\n      });\n    }\n    return getTOTPSetupDetails(SecretCode, JSON.stringify(username));\n  });\n  return _setUpTOTP.apply(this, arguments);\n}\nexport { setUpTOTP };\n//# sourceMappingURL=setUpTOTP.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}