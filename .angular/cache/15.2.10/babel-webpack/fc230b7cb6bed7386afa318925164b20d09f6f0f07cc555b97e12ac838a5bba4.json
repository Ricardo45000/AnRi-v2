{"ast":null,"code":"import { AmplifyUrl } from '../../../../../utils/amplifyUrl/index.mjs';\nimport { ALGORITHM_QUERY_PARAM, SHA256_ALGORITHM_IDENTIFIER, CREDENTIAL_QUERY_PARAM, AMZ_DATE_QUERY_PARAM, SIGNED_HEADERS_QUERY_PARAM, HOST_HEADER, EXPIRES_QUERY_PARAM, TOKEN_QUERY_PARAM, SIGNATURE_QUERY_PARAM } from './constants.mjs';\nimport { getSigningValues } from './utils/getSigningValues.mjs';\nimport { getSignature } from './utils/getSignature.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Given a `Presignable` object, returns a Signature Version 4 presigned `URL` object.\n *\n * @param presignable `Presignable` object containing at least a url to be presigned with authentication query params.\n * @param presignUrlOptions `PresignUrlOptions` object containing values used to construct the signature.\n * @returns A `URL` with authentication query params which can grant temporary access to AWS resources.\n */\nconst presignUrl = ({\n  body,\n  method = 'GET',\n  url\n}, {\n  expiration,\n  ...options\n}) => {\n  const signingValues = getSigningValues(options);\n  const {\n    accessKeyId,\n    credentialScope,\n    longDate,\n    sessionToken\n  } = signingValues;\n  // create the request to sign\n  const presignedUrl = new AmplifyUrl(url);\n  Object.entries({\n    [ALGORITHM_QUERY_PARAM]: SHA256_ALGORITHM_IDENTIFIER,\n    [CREDENTIAL_QUERY_PARAM]: `${accessKeyId}/${credentialScope}`,\n    [AMZ_DATE_QUERY_PARAM]: longDate,\n    [SIGNED_HEADERS_QUERY_PARAM]: HOST_HEADER,\n    ...(expiration && {\n      [EXPIRES_QUERY_PARAM]: expiration.toString()\n    }),\n    ...(sessionToken && {\n      [TOKEN_QUERY_PARAM]: sessionToken\n    })\n  }).forEach(([key, value]) => {\n    presignedUrl.searchParams.append(key, value);\n  });\n  const requestToSign = {\n    body,\n    headers: {\n      [HOST_HEADER]: url.host\n    },\n    method,\n    url: presignedUrl\n  };\n  // calculate and add the signature to the url\n  const signature = getSignature(requestToSign, signingValues);\n  presignedUrl.searchParams.append(SIGNATURE_QUERY_PARAM, signature);\n  return presignedUrl;\n};\nexport { presignUrl };\n//# sourceMappingURL=presignUrl.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}