{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { signInStore, setActiveSignInState, cleanActiveSignInState } from '../utils/signInStore.mjs';\nimport { AuthError } from '../../../errors/AuthError.mjs';\nimport { handleChallengeName, getNewDeviceMetatada, getSignInResult, getSignInResultFromError } from '../utils/signInHelpers.mjs';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError.mjs';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { AuthErrorCodes } from '../../../common/AuthErrorStrings.mjs';\nimport { cacheCognitoTokens } from '../tokenProvider/cacheTokens.mjs';\nimport '../utils/refreshAuthTokens.mjs';\nimport '../tokenProvider/errorHelpers.mjs';\nimport { tokenOrchestrator } from '../tokenProvider/tokenProvider.mjs';\nimport { dispatchSignedInHubEvent } from '../utils/dispatchSignedInHubEvent.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Continues or completes the sign in process when required by the initial call to `signIn`.\n *\n * @param input -  The ConfirmSignInInput object\n * @returns ConfirmSignInOutput\n * @throws  -{@link VerifySoftwareTokenException }:\n * Thrown due to an invalid MFA token.\n * @throws  -{@link RespondToAuthChallengeException }:\n * Thrown due to an invalid auth challenge response.\n * @throws  -{@link AssociateSoftwareTokenException}:\n * Thrown due to a service error during the MFA setup process.\n * @throws  -{@link AuthValidationErrorCode }:\n * Thrown when `challengeResponse` is not defined.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction confirmSignIn(_x) {\n  return _confirmSignIn.apply(this, arguments);\n}\nfunction _confirmSignIn() {\n  _confirmSignIn = _asyncToGenerator(function* (input) {\n    const {\n      challengeResponse,\n      options\n    } = input;\n    const {\n      username,\n      challengeName,\n      signInSession,\n      signInDetails\n    } = signInStore.getState();\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const clientMetaData = options?.clientMetadata;\n    assertValidationError(!!challengeResponse, AuthValidationErrorCode.EmptyChallengeResponse);\n    if (!username || !challengeName || !signInSession)\n      // TODO: remove this error message for production apps\n      throw new AuthError({\n        name: AuthErrorCodes.SignInException,\n        message: `\n\t\t\tAn error occurred during the sign in process. \n\t\t\t\n\t\t\tThis most likely occurred due to:\n\t\t\t1. signIn was not called before confirmSignIn.\n\t\t\t2. signIn threw an exception.\n\t\t\t3. page was refreshed during the sign in flow.\n\t\t\t`,\n        recoverySuggestion: 'Make sure a successful call to signIn is made before calling confirmSignIn' + 'and that the page is not refreshed until the sign in process is done.'\n      });\n    try {\n      const {\n        Session,\n        ChallengeName: handledChallengeName,\n        AuthenticationResult,\n        ChallengeParameters: handledChallengeParameters\n      } = yield handleChallengeName(username, challengeName, signInSession, challengeResponse, authConfig, tokenOrchestrator, clientMetaData, options);\n      // sets up local state used during the sign-in process\n      setActiveSignInState({\n        signInSession: Session,\n        username,\n        challengeName: handledChallengeName,\n        signInDetails\n      });\n      if (AuthenticationResult) {\n        cleanActiveSignInState();\n        yield cacheCognitoTokens({\n          username,\n          ...AuthenticationResult,\n          NewDeviceMetadata: yield getNewDeviceMetatada(authConfig.userPoolId, AuthenticationResult.NewDeviceMetadata, AuthenticationResult.AccessToken),\n          signInDetails\n        });\n        yield dispatchSignedInHubEvent();\n        return {\n          isSignedIn: true,\n          nextStep: {\n            signInStep: 'DONE'\n          }\n        };\n      }\n      return getSignInResult({\n        challengeName: handledChallengeName,\n        challengeParameters: handledChallengeParameters\n      });\n    } catch (error) {\n      assertServiceError(error);\n      const result = getSignInResultFromError(error.name);\n      if (result) return result;\n      throw error;\n    }\n  });\n  return _confirmSignIn.apply(this, arguments);\n}\nexport { confirmSignIn };\n//# sourceMappingURL=confirmSignIn.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}