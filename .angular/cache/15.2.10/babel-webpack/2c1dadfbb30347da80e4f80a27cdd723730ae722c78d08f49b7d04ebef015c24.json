{"ast":null,"code":"import _asyncToGenerator from \"/Users/ricardoda-silva/Desktop/Project/RiAn/AnRi v2/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Amplify, fetchAuthSession } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction } from '@aws-amplify/core/internals/utils';\nimport { setUserMFAPreference } from '../utils/clients/CognitoIdentityProvider/index.mjs';\nimport { getRegion } from '../utils/clients/CognitoIdentityProvider/utils.mjs';\nimport { assertAuthTokens } from '../utils/types.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Updates the MFA preference of the user.\n *\n * @param input - The UpdateMFAPreferenceInput object.\n * @throws -{@link SetUserMFAPreferenceException } - Service error thrown when the MFA preference cannot be updated.\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nfunction updateMFAPreference(_x) {\n  return _updateMFAPreference.apply(this, arguments);\n}\nfunction _updateMFAPreference() {\n  _updateMFAPreference = _asyncToGenerator(function* (input) {\n    const {\n      sms,\n      totp\n    } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const {\n      tokens\n    } = yield fetchAuthSession({\n      forceRefresh: false\n    });\n    assertAuthTokens(tokens);\n    yield setUserMFAPreference({\n      region: getRegion(authConfig.userPoolId),\n      userAgentValue: getAuthUserAgentValue(AuthAction.UpdateMFAPreference)\n    }, {\n      AccessToken: tokens.accessToken.toString(),\n      SMSMfaSettings: getMFASettings(sms),\n      SoftwareTokenMfaSettings: getMFASettings(totp)\n    });\n  });\n  return _updateMFAPreference.apply(this, arguments);\n}\nfunction getMFASettings(mfaPreference) {\n  if (mfaPreference === 'DISABLED') {\n    return {\n      Enabled: false\n    };\n  } else if (mfaPreference === 'PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: true\n    };\n  } else if (mfaPreference === 'ENABLED') {\n    return {\n      Enabled: true\n    };\n  } else if (mfaPreference === 'NOT_PREFERRED') {\n    return {\n      Enabled: true,\n      PreferredMfa: false\n    };\n  }\n}\nexport { getMFASettings, updateMFAPreference };\n//# sourceMappingURL=updateMFAPreference.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}